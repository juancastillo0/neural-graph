{"version":3,"sources":["operation/operation.tsx","canvas/arrow.tsx","canvas/canvas.tsx","canvas/store.tsx","utils.ts","graph-menu/main-menu.tsx","fields/choice-field.tsx","fields/pattern-field.tsx","fields/primitive-field.tsx","operation/layers.tsx","operation/operation-model.tsx","properties/properties-table.tsx","properties/properties-view.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledOperation","styled","div","OperationView","observer","operation","onDrag","React","useCallback","_","data","move","deltaX","deltaY","onClick","console","log","rootStore","selectOperation","useState","setDivRef","x","y","name","position","bounds","ref","e","setSize","getBoundingClientRect","triangleFromCenter","height","width","y0","ArrowView","changeX","changeY","arrow","from","to","shape","outputShape","fwidth","fheight","twidth","theight","x1","y1","x2","y2","dy","dx","m","Math","abs","xa","ya","xm","ym","degrees","atan2","PI","style","strokeWidth","stroke","d","onDoubleClick","RectAndText","text","map","v","join","transform","rectFill","padding","textRef","setTextRef","prev","setPrev","bbox","getBBox","useEffect","id","setTimeout","clearTimeout","undefined","fill","MainCanvas","ops","operations","values","border","background","margin","borderRadius","key","flatMap","op","inputs","inp","RootStoreModel","this","arrows","observable","action","selection","defaultResizeEnable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","Object","entries","reduce","p","k","MainList","ul","listItems","Activations","Model","Layers","MainMenu","disableDragging","maxWidth","minWidth","maxHeight","display","flexDirection","enableResizing","type","List","component","list","Item","open","setOpen","ListItem","button","className","ListItemText","primary","icon","Collapse","in","timeout","unmountOnExit","disablePadding","t","ButtonsDiv","ChoiceFieldSpec","choices","default","isObservableMap","keys","size","Symbol","toStringTag","mobxProp","types","optional","string","plotField","model","errors","Array","length","Select","value","onChange","target","autoWidth","MenuItem","ButtonGroup","color","aria-label","buttonStyle","Button","get","Error","PatternFieldSpec","pattern","maxLength","minLength","transformInto","deps","isTransformed","JSON","stringify","setValue","err","match","index","delete","set","TextField","inputProps","textAlign","replace","error","fullWidth","BoolFieldSpec","required","boolean","Switch","checked","NumFieldSpec","min","max","step","isInt","number","toString","num","parseInt","parseFloat","Number","isNaN","round","dimensionMap","l","DType","extractShapePattern","s","dim","dimensions","ConvolutionOpData","filters","kernelSize","parse","union","array","c","filterType","STRIDED","DILATED","filter","trainable","ConvolutionOp","computed","DenseOpData","units","useBias","DenseOp","validInput","input","OperationModel","rect","PropertiesTable","self","PropertiesTableStyled","table","PropertiesView","inner","overflowY","onInput","setName","currentTarget","spec","minHeight","boxShadow","enable","conv1","dense1","dense2","App","Boolean","window","location","hostname","library","add","faChevronDown","faChevronUp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.874fac78.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { rootStore } from \"../App\";\nimport { OperationModel } from \"./operation-model\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledOperation = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  padding: 6px;\n  background: #fff;\n  border-radius: 6;\n  border: 1px solid #eee;\n`;\n\ntype OperationViewProps = { operation: OperationModel };\nexport const OperationView: React.FC<OperationViewProps> = observer(\n  ({ operation }) => {\n    const onDrag = React.useCallback(\n      (_: DraggableEvent, data: DraggableData) => {\n        operation.move(data.deltaX, data.deltaY);\n      },\n      [operation]\n    );\n    const onClick = React.useCallback(\n      (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        console.log(operation);\n        rootStore.selectOperation(operation);\n      },\n      [operation]\n    );\n    const [_divRef, setDivRef] = React.useState<HTMLDivElement | null>(null);\n    const { x, y, name } = operation;\n    return (\n      <Draggable onDrag={onDrag} position={{ x, y }} bounds=\"parent\">\n        <StyledOperation\n          ref={(e) => {\n            if (e === null) return;\n            operation.setSize(e.getBoundingClientRect());\n            setDivRef(e);\n          }}\n          onClick={onClick}\n        >\n          {`Layer ${name}`}\n        </StyledOperation>\n      </Draggable>\n    );\n  }\n);\n\n// export const createOp = <V extends { [key: string]: FieldSpec }>(\n//   name: string,\n//   data: V,\n//   outputShape: (\n//     model: Instance<\n//       IModelType<{ [key in keyof V]: ReturnType<V[key][\"mobxProp\"]> }, {}>\n//     >,\n//     inputs: OperationModelT[]\n//   ) => Shape\n// ) => {\n//   const props = Object.entries(data).reduce(\n//     (acc, [k, v]) => {\n//       acc[k as keyof V] = v.mobxProp() as any;\n//       return acc;\n//     },\n//     {} as {\n//       [key in keyof V]: ReturnType<V[key][\"mobxProp\"]>;\n//     }\n//   );\n\n//   return types\n//     .model(name, {\n//       ...props,\n//       OP_TYPE: types.optional(types.literal(name), name),\n//       inputs: types.array(types.reference(types.late(() => OperationModel))),\n//     })\n//     .actions((self) => ({\n//       setValue<K extends string & keyof V>(name: K, value: any) {\n//         self[name] = value;\n//       },\n//     }))\n//     .views((self) => {\n//       const errors = observable.map<string, string>();\n//       return {\n//         outputShape(): Shape {\n//           return outputShape(self as any, self.inputs);\n//         },\n//         errorsMap() {\n//           return errors;\n//         },\n//         form() {\n//           return <PropertiesTable self={self} errors={errors} data={data} />;\n//         },\n//       };\n//     });\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { OperationModel } from \"../operation/operation-model\";\n\nexport type ArrowModel = {\n  from: OperationModel;\n  to: OperationModel;\n};\n\n// export const ArrowModel = types.model(\"Arrow\", {\n//   key: types.identifier,\n//   from: types.reference(OperationModel),\n//   to: types.reference(OperationModel),\n//   shape: types.array(types.maybe(types.integer)),\n// });\n\n// export interface ArrowModelT extends Instance<typeof ArrowModel> {}\n\ntype ArrowViewProps = { arrow: ArrowModel };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ arrow }: ArrowViewProps) => {\n    const { from, to } = arrow;\n    const shape = from.data.outputShape;\n\n    const fwidth = from.width || 60;\n    const fheight = from.height || 60;\n    const twidth = to.width || 60;\n    const theight = to.height || 60;\n\n    const [x1, y1, x2, y2] = [\n      from.x + fwidth / 2,\n      from.y + fheight / 2,\n      to.x + twidth / 2,\n      to.y + theight / 2,\n    ];\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n\n    let changeX;\n    let changeY;\n    if (dx === 0) {\n      changeX = 0;\n      changeY = ((y2 > y1 ? 1 : -1) * theight) / 2;\n    } else if (dy === 0) {\n      changeY = 0;\n      changeX = ((x2 > x1 ? 1 : -1) * twidth) / 2;\n    } else {\n      const m = Math.abs(dy / dx);\n      const [deltaX, deltaY] =\n        m > theight / twidth\n          ? [theight / 2 / m, theight / 2]\n          : [twidth / 2, (twidth / 2) * m];\n      changeY = (y2 > y1 ? 1 : -1) * deltaY;\n      changeX = (x2 > x1 ? 1 : -1) * deltaX;\n    }\n    const xa = x2 - changeX;\n    const ya = y2 - changeY;\n\n    const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n    return (\n      <>\n        <path\n          style={{ strokeWidth: 2, stroke: \"black\" }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onDoubleClick={(e) => {\n            console.log(e);\n          }}\n        />\n        <RectAndText\n          text={`[${shape.map((v) => v || \"?\").join(\", \")}]`}\n          x={xm}\n          y={ym}\n        />\n        <path\n          d={triangleFromCenter(xa, ya)}\n          transform={`rotate(${degrees} ${xa} ${ya})`}\n        />\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  text: string;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n}> = observer(({ text, x: xm, y: ym, rectFill = \"#eee\", padding = 3 }) => {\n  const [textRef, setTextRef] = React.useState<SVGTextElement | null>(null);\n  const [prev, setPrev] = React.useState(text);\n  const bbox = textRef?.getBBox();\n  React.useEffect(() => {\n    if (prev !== text) {\n      const id = setTimeout(() => setPrev(text), 0);\n      return () => clearTimeout(id);\n    }\n  });\n\n  return (\n    <>\n      {bbox !== undefined && (\n        <rect\n          width={bbox.width + padding * 2}\n          height={bbox.height + padding * 2}\n          x={xm - bbox.width / 2 - padding}\n          y={ym - bbox.height + padding}\n          fill={rectFill}\n        ></rect>\n      )}\n      <text\n        x={bbox !== undefined ? xm - bbox.width / 2 : xm}\n        y={ym}\n        fill=\"black\"\n        ref={setTextRef}\n      >\n        {text}\n      </text>\n    </>\n  );\n});\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { rootStore } from \"../App\";\nimport { OperationView } from \"../operation/operation\";\nimport { ArrowView } from \"./arrow\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const ops = [...rootStore.operations.values()];\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        border: \"1px solid #eee\",\n        height: \"100%\",\n        background: \"#fff\",\n        margin: \"10px\",\n        borderRadius: \"6px\",\n      }}\n    >\n      {ops.map((operation) => {\n        console.log(operation);\n        return <OperationView operation={operation} key={operation.key} />;\n      })}\n      <svg style={{ width: \"100%\", height: \"100%\" }}>\n        {ops\n          .flatMap((op) => op.data.inputs.map((inp) => ({ from: inp, to: op })))\n          .map((arrow) => (\n            <ArrowView arrow={arrow} key={arrow.from.key + arrow.to.key} />\n          ))}\n      </svg>\n    </div>\n  );\n});\n","import { action, IObservableArray, observable, ObservableMap } from \"mobx\";\nimport { OperationModel } from \"../operation/operation-model\";\nimport { ArrowModel } from \"./arrow\";\n\nexport class RootStoreModel {\n  constructor(d: {\n    operations: ObservableMap<string, OperationModel>;\n    arrows: IObservableArray<ArrowModel>;\n  }) {\n    this.operations = d.operations;\n    this.arrows = d.arrows;\n  }\n  @observable\n  operations: ObservableMap<string, OperationModel>;\n  @observable\n  arrows: IObservableArray<ArrowModel>;\n  @observable\n  selection?: OperationModel;\n\n  @action\n  selectOperation = (operation: OperationModel) => {\n    this.selection = operation;\n  };\n}\n\n// export const RootStoreModel = types\n//   .model(\"RootStore\", {\n//     operations: types.map(OperationModel),\n//     arrows: types.array(ArrowModel),\n//     selection: types.maybeNull(types.reference(OperationModel)),\n//   })\n//   .actions((self) => ({\n//     selectOperation(operation: OperationModelT) {\n//       self.selection = operation;\n//     },\n//   }));\n\n// export interface RootStoreModelI extends Instance<typeof RootStoreModel> {}\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce((p, [k, v]) => {\n    if (v !== undefined) {\n      p[k as keyof typeof defaultResizeEnable] = v;\n    }\n    return p;\n  }, defaultResizeEnable);\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport styled from \"styled-components\";\nimport { resizableEnable } from \"../utils\";\n\nconst MainList = styled.ul`\n  overflow-y: scroll;\n  height: 100%;\n  margin: 0;\n  padding: 0px 10px 25px;\n\n  .group {\n    padding-left: 10px;\n    padding-top: 3px;\n    padding-bottom: 3px;\n    border-top: 2px solid #eee;\n    margin-top: 6px;\n    .MuiListItemText-primary {\n      font-weight: bold;\n    }\n  }\n  .nested {\n    padding-left: 25px;\n    padding-top: 0px;\n    padding-bottom: 0px;\n  }\n`;\n\ntype Props = {};\n\nconst listItems = {\n  Activations: [\"Softmax\", \"Sigmoid\", \"Relu\"],\n  Model: [\"Input\", \"Loss\", \"Metric\", \"Optimizer\", \"Callback\"],\n  Layers: [\n    \"Convolutional\",\n    \"Dense\",\n    \"Recurrent\",\n    \"Transformer\",\n    \"Dropout\",\n    \"Embedding\",\n    \"Normalization\",\n  ],\n  \"Slice / Shape\": [\n    \"Concat\",\n    \"Gather\",\n    \"Stack\",\n    \"Tile\",\n    \"Slice\",\n    \"Split\",\n    \"Reshape\",\n    \"Traspose\",\n  ],\n};\n\nexport const MainMenu: React.FC<Props> = observer(() => {\n  return (\n    <Rnd\n      disableDragging={true}\n      maxWidth={300}\n      minWidth={200}\n      style={{\n        position: \"relative\",\n        maxHeight: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n      enableResizing={resizableEnable({\n        right: true,\n      })}\n    >\n      <input type=\"text\" />\n      <MainList>\n        <List component=\"nav\">\n          {Object.entries(listItems).map(([name, list]) => (\n            <Item key={name} name={name} list={list} />\n          ))}\n        </List>\n      </MainList>\n    </Rnd>\n  );\n});\n\ntype ItemProps = { name: string; list: string[] };\n\nexport const Item: React.FC<ItemProps> = observer(({ name, list }) => {\n  const [open, setOpen] = React.useState(true);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)} className=\"group\">\n        <ListItemText primary={name} />\n        <FontAwesomeIcon icon={open ? \"chevron-up\" : \"chevron-down\"} />\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {list.map((t) => (\n            <ListItem button key={t} className=\"nested\">\n              <ListItemText primary={t} />\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n    </>\n  );\n});\n\n/* <li>\n          <div>Aritmetic Operations</div>\n          <ul>\n            <li>Add</li>\n            <li>Sub</li>\n            <li>Mul</li>\n            <li>Div</li>\n            <li>Max</li>\n            <li>Min</li>\n            <li>Pow</li>\n            <li>Min</li>\n            <li>Exp</li>\n          </ul>\n        </li>\n\n        <li>\n          <div>Logic Operations</div>\n          <ul>\n            <li>Equal</li>\n            <li>Greater</li>\n            <li>Greater Equal</li>\n            <li>Less</li>\n            <li>Less Equal</li>\n            <li>And</li>\n            <li>Or</li>\n            <li>Not</li>\n            <li>Xor</li>\n            <li>Not Equal</li>\n            <li>Where</li>\n          </ul>\n        </li> */\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { PP } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType\n> {\n  choices: C;\n  default: K;\n\n  constructor(v: { choices: C; default: K }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField = observer(\n    <\n      KM extends string & keyof M,\n      M extends {\n        setValue: (key: KM, value: any) => void;\n        [key: string]: any;\n      }\n    >({\n      name,\n      model,\n      errors,\n    }: PP<KM, M>) => {\n      let keys;\n      if (this.isObservableMap()) {\n        keys = Array.from(\n          (this.choices as any).keys() as IterableIterator<string>\n        );\n      } else {\n        keys = Object.keys(this.choices);\n      }\n\n      if (keys.length > 3) {\n        return (\n          <Select\n            value={model[name]}\n            onChange={(e) => {\n              model[name] = e.target.value as any; \n            }}\n            autoWidth={true}\n          >\n            {keys.map((k) => {\n              return <MenuItem value={k}>{k}</MenuItem>;\n            })}\n          </Select>\n        );\n      } else {\n        return (\n          <ButtonsDiv key={name}>\n            <ButtonGroup\n              size=\"small\"\n              color=\"primary\"\n              aria-label=\"outlined primary button group\"\n            >\n              {keys.map((k) => {\n                const buttonStyle =\n                  k === (model[name] as any)\n                    ? { background: \"#3f51b5\", color: \"white\" }\n                    : {};\n\n                return (\n                  <Button\n                    key={k}\n                    onClick={() => {\n                      model[name] = k as any;\n                    }}\n                    style={buttonStyle}\n                  >\n                    {k}\n                  </Button>\n                );\n              })}\n            </ButtonGroup>\n          </ButtonsDiv>\n        );\n      }\n    }\n  );\n}\n","import TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { PP } from \"./\";\n\nconst _patternError = \"Pattern doesn't match.\";\nexport class PatternFieldSpec<\n  T,\n  Tr extends (value: string) => T,\n  KM extends string & keyof M,\n  M extends { setValue: (key: KM, value: any) => void; [key: string]: any },\n  MT extends IAnyType\n> {\n  default: T;\n  pattern: string | RegExp | ((state: M) => string | RegExp);\n  maxLength?: number;\n  minLength?: number;\n  transform: Tr;\n  transformInto: MT;\n  deps?: string[];\n\n  constructor(v: {\n    default: T;\n    pattern: string | RegExp | ((state: M) => string | RegExp);\n    maxLength?: number;\n    minLength?: number;\n    transform: Tr;\n    transformInto: MT;\n    deps?: string[];\n  }) {\n    this.default = v.default;\n    this.pattern = v.pattern;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n    this.transform = v.transform;\n    this.transformInto = v.transformInto;\n    this.deps = v.deps;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n\n      if (\n        this.pattern !== undefined &&\n        typeof this.pattern !== \"function\" &&\n        !this.default.match(this.pattern)\n      ) {\n        throw Error(\"RegExp pattern doesn't match\");\n      }\n    }\n\n    if (\n      (this.transform !== undefined && this.transformInto === undefined) ||\n      (this.transform === undefined && this.transformInto !== undefined)\n    ) {\n      throw Error(\"Transform\");\n    }\n  }\n\n  isTransformed = () => {\n    return (\n      (this.transform === undefined || this.transformInto === undefined) &&\n      typeof this.default === \"string\"\n    );\n  };\n\n  mobxProp = () => {\n    return types.optional(this.transformInto, this.default);\n  };\n\n  plotField = observer(({ name, model, errors }: PP<KM, M>) => {\n    const [value, setValue] = React.useState(\n      this.transform !== undefined\n        ? JSON.stringify(model[name])\n        : (model[name] as string)\n    );\n\n    const deps =\n      this.deps !== undefined\n        ? [...this.deps.map((d) => model[d]), this.pattern, model]\n        : [this.pattern, model];\n\n    React.useEffect(() => {\n      if (this.pattern !== undefined && typeof this.pattern === \"function\") {\n        const err = errors.get(name);\n        if (err === _patternError) {\n          const match = value.match(this.pattern(model));\n          if (!(match === null || match.index !== 0)) {\n            errors.delete(name);\n          }\n        } else if (err === undefined) {\n          const match = value.match(this.pattern(model));\n          if (match === null || match.index !== 0) {\n            errors.set(name, _patternError);\n          }\n        }\n      }\n    }, [value, ...deps]);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value;\n          let match;\n          if (this.pattern !== undefined) {\n            value = value.replace(/\\s/g, \"\");\n            const p =\n              typeof this.pattern === \"function\"\n                ? this.pattern(model)\n                : this.pattern;\n            match = value.match(p as any);\n          }\n          setValue(value);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else if (\n            this.pattern !== undefined &&\n            (match === null || match?.index !== 0)\n          ) {\n            errors.set(name, _patternError);\n          } else if (this.transform !== undefined) {\n            errors.delete(name);\n            model[name] = this.transform(value) as any;\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"120px\" }}\n      />\n    );\n  });\n}\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { PP } from \"./\";\n\nexport class StrFieldSpec<\n  KM extends string & keyof M,\n  M extends { setValue: (key: KM, value: any) => void; [key: string]: any }\n> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n\n  constructor(v: { default: string; maxLength?: number; minLength?: number }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model, errors }: PP<KM, M>) => {\n    const [value, setValue] = React.useState(model[name] as string);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value;\n          setValue(value);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"120px\" }}\n      />\n    );\n  });\n}\n\nexport class BoolFieldSpec {\n  default: boolean;\n  required?: boolean;\n\n  constructor(v: { default: boolean; required?: boolean }) {\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(\n    <\n      KM extends string & keyof M,\n      M extends {\n        setValue: (key: KM, value: any) => void;\n        [key: string]: any;\n      } & { [k in KM]: boolean }\n    >({\n      name,\n      model,\n      errors,\n    }: PP<KM, M>) => {\n      return (\n        <Switch\n          checked={model[name]}\n          onChange={() => {\n            model[name] = !model[name] as any;\n          }}\n          color=\"primary\"\n        />\n      );\n    }\n  );\n}\n\nexport class NumFieldSpec {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(\n    <\n      KM extends string & keyof M,\n      M extends { setValue: (key: KM, value: any) => void; [key: string]: any }\n    >({\n      name,\n      model,\n      errors,\n    }: PP<KM, M>) => {\n      const [value, setValue] = React.useState(\n        ((model[name] as any) as number).toString()\n      );\n\n      return (\n        <TextField\n          key={name}\n          value={value}\n          inputProps={{\n            min: this.min,\n            max: this.max,\n            step: this.step,\n            style: { textAlign: \"center\" },\n          }}\n          type=\"number\"\n          onChange={(e) => {\n            setValue(e.target.value);\n\n            let num: number;\n            if (this.isInt) {\n              num = parseInt(e.target.value, 10);\n            } else {\n              num = parseFloat(e.target.value);\n            }\n\n            if (!Number.isNaN(num)) {\n              errors.delete(name);\n              model[name] = num as any;\n            } else {\n              errors.set(name, \"invalid\");\n            }\n          }}\n          fullWidth={true}\n          style={{ width: \"80px\" }}\n        />\n      );\n    }\n  );\n}\n","import { computed, IObservableArray, observable, ObservableMap } from \"mobx\";\nimport { types } from \"mobx-state-tree\";\nimport { BoolFieldSpec, ChoiceFieldSpec, FieldSpec, NumFieldSpec, PatternFieldSpec } from \"../fields/\";\nimport { listToMap } from \"../utils\";\nimport { Shape } from \"./operation\";\nimport { OperationModel } from \"./operation-model\";\n\nconst dimensionMap = { \"1D\": 1, \"2D\": 2, \"3D\": 3 };\nfunction shapeFromDim(dim: number) {\n  if (dim === 3) {\n    return /\\d+|\\[\\d+\\]|\\[\\d+,\\d+\\]|\\[\\d+,\\d+,\\d+\\]/;\n  } else if (dim === 2) {\n    return /\\d+|\\[\\d+\\]|\\[\\d+,\\d+\\]/;\n  } else {\n    return /\\d+|\\[\\d+\\]/;\n  }\n}\n\nconst extractShapePattern = (s: any) =>\n  shapeFromDim(dimensionMap[s.dimensions as keyof typeof dimensionMap]);\n\ntype OperationI<V extends { [key: string]: FieldSpec }> = {\n  [key in keyof V]: ReturnType<V[key][\"default\"]>;\n} & {\n  outputShape: Shape;\n  inputs: OperationModel[];\n  errors: ObservableMap<string, string>;\n  spec: V;\n};\n\nconst ConvolutionOpData = {\n  dimensions: new ChoiceFieldSpec({\n    choices: dimensionMap,\n    default: \"1D\",\n  }),\n  filters: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n  kernelSize: new PatternFieldSpec({\n    default: [3],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: (value: string) => JSON.parse(value),\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  padding: new ChoiceFieldSpec({\n    choices: listToMap([\"VALID\", \"SAME\", \"CAUSAL\"]),\n    default: \"SAME\",\n  }),\n  filterType: new ChoiceFieldSpec({\n    choices: { STRIDED: \"STRIDED\", DILATED: \"DILATED\" },\n    default: \"STRIDED\",\n  }),\n  filter: new PatternFieldSpec({\n    default: [1],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: (value: string) => JSON.parse(value),\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  trainable: new BoolFieldSpec({ default: true }),\n};\n\nexport class ConvolutionOp implements OperationI<typeof ConvolutionOpData> {\n  get spec() {\n    return ConvolutionOpData;\n  }\n  constructor() {}\n\n  @observable\n  dimensions: string = ConvolutionOpData.dimensions.default;\n  @observable\n  filters: number = ConvolutionOpData.filters.default;\n  @observable\n  kernelSize: number[] = ConvolutionOpData.kernelSize.default;\n  @observable\n  padding: \"VALID\" | \"SAME\" | \"CAUSAL\" = ConvolutionOpData.padding.default;\n  @observable\n  filterType: \"STRIDED\" | \"DILATED\" = ConvolutionOpData.filterType.default;\n  @observable\n  filter: number[] = ConvolutionOpData.filter.default;\n  @observable\n  trainable: boolean = ConvolutionOpData.trainable.default;\n\n  @observable\n  inputs: OperationModel[] = [];\n  @observable\n  errors = observable.map<string, string>();\n\n  @computed\n  get outputShape(): Shape {\n    return [];\n  }\n}\n\nconst DenseOpData = {\n  units: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n  useBias: new BoolFieldSpec({ default: true }),\n};\n\nexport class DenseOp implements OperationI<typeof DenseOpData> {\n  get spec() {\n    return DenseOpData;\n  }\n\n  constructor(\n    d: {\n      units?: number;\n      useBias?: boolean;\n      inputs?: OperationModel[];\n    } = {}\n  ) {\n    this.units = d.units ?? DenseOpData.units.default;\n    this.useBias = d.useBias ?? DenseOpData.useBias.default;\n    this.inputs = d.inputs ? observable.array(d.inputs) : observable.array([]);\n  }\n\n  @observable\n  units: number;\n  @observable\n  useBias: boolean;\n\n  validInput = (op: OperationModel): boolean => {\n    return op.data.outputShape.length == 2;\n  };\n\n  @computed\n  get outputShape(): Shape {\n    const input = this.inputs[0];\n    if (!input) {\n      return [undefined];\n    }\n    return [input.data.outputShape[0], this.units];\n  }\n\n  @observable\n  inputs: IObservableArray<OperationModel>;\n  @observable\n  errors: ObservableMap<keyof typeof DenseOpData, string> = observable.map();\n}\n\nenum DType {\n  float32 = \"float32\",\n  int32 = \"int32\",\n  bool = \"bool\",\n  complex64 = \"complex64\",\n  string = \"string\",\n}\n\n// export const _DenseOp = createOp(\n//   \"Dense\",\n//   {\n//     units: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n//     useBias: new BoolFieldSpec({ default: true }),\n//   },\n//   (m) => {\n//     return [];\n//   }\n// );\n\n// export const _ConvolutionOp = createOp(\n//   \"Convolution\",\n//   {\n//     dimensions: new ChoiceFieldSpec({\n//       choices: dimensionMap,\n//       default: \"1D\",\n//     }),\n//     filters: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n//     kernelSize: (() =>\n//       new PatternFieldSpec({\n//         default: [3],\n//         pattern: extractShapePattern,\n//         deps: [\"dimensions\"],\n//         transform: (value: string) => JSON.parse(value),\n//         transformInto: types.union(types.number, types.array(types.number)),\n//       }))(),\n//     padding: new ChoiceFieldSpec({\n//       choices: listToMap([\"VALID\", \"SAME\", \"CAUSAL\"]),\n//       default: \"SAME\",\n//     }),\n//     filterType: new ChoiceFieldSpec({\n//       choices: { STRIDED: \"STRIDED\", DILATED: \"DILATED\" },\n//       default: \"STRIDED\",\n//     }),\n//     filter: new PatternFieldSpec({\n//       default: [1],\n//       pattern: extractShapePattern,\n//       deps: [\"dimensions\"],\n//       transform: (value: string) => JSON.parse(value),\n//       transformInto: types.union(types.number, types.array(types.number)),\n//     }),\n//     trainable: new BoolFieldSpec({ default: true }),\n//   },\n//   (m, l) => {\n//     l[0].from.data.outputShape();\n//     return [];\n//   }\n// );\n\n// export const InputOp = createOp(\n//   \"Input\",\n//   {\n//     shape: new PatternFieldSpec({\n//       default: [undefined, 10],\n//       pattern: /(\\d+|\\?)|\\[(\\d+|\\?)(,\\d+)+ (,)?\\]/,\n//       transform: (value: string) =>\n//         JSON.parse(value.replace(\"?\", \"undefined\").replace(\",]\", \"]\")),\n//       transformInto: types.union(\n//         types.maybe(types.number),\n//         types.array(types.maybe(types.number))\n//       ),\n//     }),\n//     dtype: new ChoiceFieldSpec({\n//       default: \"float32\",\n//       choices: listToMap(Object.values(DType)),\n//     }),\n//   },\n//   (m, b) => {\n//     return [];\n//   }\n// );\n","import { action, observable } from \"mobx\";\nimport { ConvolutionOp, DenseOp } from \"./layers\";\n\ntype OperationData = ConvolutionOp | DenseOp;\n\nexport class OperationModel {\n  constructor(d: {\n    key: string;\n    name: string;\n    x: number;\n    y: number;\n    data: OperationData;\n  }) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.data = d.data;\n  }\n\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width?: number;\n  @observable\n  height?: number;\n  @observable\n  data: OperationData;\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n}\n\n// export const OperationModel = types\n//   .model(\"Operation\", {\n//     key: types.identifier,\n//     name: types.string,\n//     x: types.number,\n//     y: types.number,\n//     width: types.maybe(types.number),\n//     height: types.maybe(types.number),\n//     data: types.union(ConvolutionOp, DenseOp),\n//   })\n//   .actions((self) => ({\n//     move(dx: number, dy: number) {\n//       self.x += dx;\n//       self.y += dy;\n//     },\n//     setSize(rect: DOMRect) {\n//       self.width = rect.width;\n//       self.height = rect.height;\n//     },\n//     setName(name: string) {\n//       self.name = name;\n//     },\n//   }));\n\n// export interface OperationModelT extends Instance<typeof OperationModel> {}\n","import { ObservableMap } from \"mobx\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec } from \"../fields\";\n\ntype Props = {\n  self: any;\n  errors: ObservableMap<string, string>;\n  data: {\n    [key: string]: FieldSpec;\n  };\n};\n\nexport const PropertiesTable = observer(({ self, errors, data }: Props) => {\n  return (\n    <form>\n      <PropertiesTableStyled>\n        <thead>\n          <tr>\n            <td>Property</td>\n            <td>Value</td>\n          </tr>\n        </thead>\n        <tbody>\n          {Object.entries(data).map(([k, v]) => (\n            <tr key={k}>\n              <td>{k}</td>\n              <td>\n                <v.plotField name={k} model={self} errors={errors} />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </PropertiesTableStyled>\n    </form>\n  );\n});\n\nconst PropertiesTableStyled = styled.table`\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { rootStore } from \"../App\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTable } from \"./properties-table\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  let inner;\n  if (rootStore.selection != null) {\n    const operation = rootStore.selection;\n    inner = (\n      <div\n        style={{ overflowY: \"auto\", maxHeight: \"100%\" }}\n        key={rootStore.selection.key}\n      >\n        <input\n          type=\"text\"\n          value={operation.name}\n          onInput={(e) => operation.setName(e.currentTarget.value)}\n          onChange={() => {}}\n        ></input>\n        <PropertiesTable\n          self={rootStore.selection.data}\n          errors={rootStore.selection.data.errors}\n          data={rootStore.selection.data.spec}\n        />\n      </div>\n    );\n  } else {\n    inner = (\n      <div className=\"row\">\n        <div className=\"center\">Not Selected</div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        padding: \"15px\",\n        borderRadius: \"6px 6px 0 0\",\n        border: \"1px solid #eee\",\n        margin: \"0 10px\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","import { observable } from \"mobx\";\nimport React from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { RootStoreModel } from \"./canvas/store\";\nimport { MainMenu } from \"./graph-menu/main-menu\";\nimport { ConvolutionOp, DenseOp } from \"./operation/layers\";\nimport { OperationModel } from \"./operation/operation-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\n\n// Regularizer, Constraint, Initializer,\n// dilationRate (number|[number]|[number, number]|[number, number, number])\n// The dilation rate to use for the dilated convolution in each dimension.\n// Should be an integer or array of two or three integers.\n\n// strides (number|number[]) The strides of the convolution in each dimension.\n// If strides is a number, strides in both dimensions are equal.\n// Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.\n\nconst conv1 = new OperationModel({\n  key: \"conv1\",\n  name: \"Conv 1\",\n  x: 350,\n  y: 300,\n  data: new ConvolutionOp(),\n});\n\nconst dense1 = new OperationModel({\n  key: \"dense1\",\n  name: \"Dense 1\",\n  x: 100,\n  y: 100,\n  data: new DenseOp({ inputs: [conv1] }),\n});\n\nconst dense2 = new OperationModel({\n  key: \"dense2\",\n  name: \"Dense 2\",\n  x: 150,\n  y: 350,\n  data: new DenseOp({ inputs: [conv1, dense1] }),\n});\n\nexport const rootStore = new RootStoreModel({\n  operations: observable.map({\n    dense1,\n    conv1,\n    dense2,\n  }),\n  arrows: observable.array([]),\n});\n\nexport function App() {\n  return (\n    <div\n      className=\"row\"\n      style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n    >\n      <MainMenu />\n      <div\n        className=\"col\"\n        style={{ width: \"100%\", background: \"rgba(250,250,250,0.7)\" }}\n      >\n        <MainCanvas />\n        <PropertiesView />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}