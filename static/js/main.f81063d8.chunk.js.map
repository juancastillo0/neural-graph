{"version":3,"sources":["operation/operation.tsx","canvas/arrow.tsx","canvas/canvas.tsx","canvas/store.tsx","utils.ts","graph-menu/main-menu.tsx","fields/choice-field.tsx","fields/pattern-field.tsx","fields/primitive-field.tsx","operation/layers.tsx","operation/operation-model.tsx","properties/properties-table.tsx","properties/properties-view.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledOperation","styled","div","OperationView","observer","operation","onDrag","React","useCallback","_","data","move","deltaX","deltaY","onClick","console","log","rootStore","selectOperation","x","y","name","position","bounds","ref","e","setSize","getBoundingClientRect","triangleFromCenter","height","width","y0","ArrowView","changeX","changeY","arrow","from","to","shape","outputShape","x1","y1","x2","y2","dy","dx","m","Math","abs","xa","ya","xm","ym","degrees","atan2","PI","style","strokeWidth","stroke","d","onDoubleClick","RectAndText","text","map","v","join","transform","rectFill","padding","useState","textRef","setTextRef","prev","setPrev","bbox","getBBox","useEffect","id","setTimeout","clearTimeout","undefined","fill","MainCanvas","ops","operations","values","border","background","margin","borderRadius","key","flatMap","op","inputs","inp","RootStoreModel","this","arrows","observable","action","selection","listToMap","l","reduce","p","c","toString","defaultResizeEnable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","Object","entries","k","MainList","ul","listItems","Model","Layers","Activations","MainMenu","disableDragging","maxWidth","minWidth","maxHeight","display","flexDirection","enableResizing","type","List","component","list","Item","open","setOpen","ListItem","button","className","ListItemText","primary","icon","Collapse","in","timeout","unmountOnExit","disablePadding","t","ButtonsDiv","ChoiceFieldSpec","choices","default","isObservableMap","keys","size","Symbol","toStringTag","mobxProp","types","optional","string","plotField","model","Array","length","Select","value","onChange","target","autoWidth","MenuItem","ButtonGroup","color","aria-label","buttonStyle","Button","get","Error","PatternFieldSpec","pattern","maxLength","minLength","transformFrom","transformInto","deps","isTransformed","setValue","errors","err","match","index","delete","set","TextField","inputProps","textAlign","replace","error","fullWidth","JSON","stringify","BoolFieldSpec","required","boolean","Switch","checked","NumFieldSpec","min","max","step","isInt","number","num","parseInt","parseFloat","Number","isNaN","round","dimensionMap","parseArrayFromString","ans","parse","extractShapePattern","s","dim","dimensions","mobxDecorators","spec","computed","ConvolutionOpData","filters","kernelSize","union","array","stride","dilationRate","trainable","replicateIfOne","initial","len","ConvolutionOp","NAME","nInputs","validInput","input","result","i","push","ceil","decorate","DType","DenseOpData","units","useBias","DenseOp","InputOpData","maybe","dtype","InputOp","OperationModel","rect","PropertiesTable","self","PropertiesTableStyled","table","PropertiesView","inner","overflowY","onInput","setName","currentTarget","minHeight","boxShadow","enable","input1","dense1","conv1","dense2","App","Boolean","window","location","hostname","library","add","faChevronDown","faChevronUp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f81063d8.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { rootStore } from \"../App\";\nimport { OperationModel } from \"./operation-model\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledOperation = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  padding: 6px;\n  background: #fff;\n  border-radius: 6;\n  border: 1px solid #eee;\n`;\n\ntype OperationViewProps = { operation: OperationModel };\nexport const OperationView: React.FC<OperationViewProps> = observer(\n  ({ operation }) => {\n    const onDrag = React.useCallback(\n      (_: DraggableEvent, data: DraggableData) => {\n        operation.move(data.deltaX, data.deltaY);\n      },\n      [operation]\n    );\n    const onClick = React.useCallback(\n      (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        console.log(operation);\n        rootStore.selectOperation(operation);\n      },\n      [operation]\n    );\n    // const [_, setDivRef] = React.useState<HTMLDivElement | null>(null);\n    const { x, y, name } = operation;\n    return (\n      <Draggable onDrag={onDrag} position={{ x, y }} bounds=\"parent\">\n        <StyledOperation\n          ref={(e) => {\n            if (e === null) return;\n            operation.setSize(e.getBoundingClientRect());\n          }}\n          onClick={onClick}\n        >\n          {`Layer ${name}`}\n        </StyledOperation>\n      </Draggable>\n    );\n  }\n);\n\n// export const createOp = <V extends { [key: string]: FieldSpec }>(\n//   name: string,\n//   data: V,\n//   outputShape: (\n//     model: Instance<\n//       IModelType<{ [key in keyof V]: ReturnType<V[key][\"mobxProp\"]> }, {}>\n//     >,\n//     inputs: OperationModelT[]\n//   ) => Shape\n// ) => {\n//   const props = Object.entries(data).reduce(\n//     (acc, [k, v]) => {\n//       acc[k as keyof V] = v.mobxProp() as any;\n//       return acc;\n//     },\n//     {} as {\n//       [key in keyof V]: ReturnType<V[key][\"mobxProp\"]>;\n//     }\n//   );\n\n//   return types\n//     .model(name, {\n//       ...props,\n//       OP_TYPE: types.optional(types.literal(name), name),\n//       inputs: types.array(types.reference(types.late(() => OperationModel))),\n//     })\n//     .actions((self) => ({\n//       setValue<K extends string & keyof V>(name: K, value: any) {\n//         self[name] = value;\n//       },\n//     }))\n//     .views((self) => {\n//       const errors = observable.map<string, string>();\n//       return {\n//         outputShape(): Shape {\n//           return outputShape(self as any, self.inputs);\n//         },\n//         errorsMap() {\n//           return errors;\n//         },\n//         form() {\n//           return <PropertiesTable self={self} errors={errors} data={data} />;\n//         },\n//       };\n//     });\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { OperationModel } from \"../operation/operation-model\";\n\nexport type ArrowModel = {\n  from: OperationModel;\n  to: OperationModel;\n};\n\n// export const ArrowModel = types.model(\"Arrow\", {\n//   key: types.identifier,\n//   from: types.reference(OperationModel),\n//   to: types.reference(OperationModel),\n//   shape: types.array(types.maybe(types.integer)),\n// });\n\n// export interface ArrowModelT extends Instance<typeof ArrowModel> {}\n\ntype ArrowViewProps = { arrow: ArrowModel };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ arrow }: ArrowViewProps) => {\n    const { from, to } = arrow;\n    const shape = from.data.outputShape;\n\n    const [x1, y1, x2, y2] = [\n      from.x + from.width / 2,\n      from.y + from.height / 2,\n      to.x + to.width / 2,\n      to.y + to.height / 2,\n    ];\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n\n    let changeX;\n    let changeY;\n    if (dx === 0) {\n      changeX = 0;\n      changeY = ((y2 > y1 ? 1 : -1) * to.height) / 2;\n    } else if (dy === 0) {\n      changeY = 0;\n      changeX = ((x2 > x1 ? 1 : -1) * to.width) / 2;\n    } else {\n      const m = Math.abs(dy / dx);\n      const [deltaX, deltaY] =\n        m > to.height / to.width\n          ? [to.height / 2 / m, to.height / 2]\n          : [to.width / 2, (to.width / 2) * m];\n      changeY = (y2 > y1 ? 1 : -1) * deltaY;\n      changeX = (x2 > x1 ? 1 : -1) * deltaX;\n    }\n    const xa = x2 - changeX;\n    const ya = y2 - changeY;\n\n    const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n    return (\n      <>\n        <path\n          style={{ strokeWidth: 2, stroke: \"black\" }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onDoubleClick={(e) => {\n            console.log(e);\n          }}\n        />\n        <RectAndText\n          text={`[${shape.map((v) => v || \"?\").join(\", \")}]`}\n          x={xm}\n          y={ym}\n        />\n        <path\n          d={triangleFromCenter(xa, ya)}\n          transform={`rotate(${degrees} ${xa} ${ya})`}\n        />\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  text: string;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n}> = observer(({ text, x: xm, y: ym, rectFill = \"#eee\", padding = 3 }) => {\n  const [textRef, setTextRef] = React.useState<SVGTextElement | null>(null);\n  const [prev, setPrev] = React.useState(text);\n  const bbox = textRef?.getBBox();\n  React.useEffect(() => {\n    if (prev !== text) {\n      const id = setTimeout(() => setPrev(text), 0);\n      return () => clearTimeout(id);\n    }\n  });\n\n  return (\n    <>\n      {bbox !== undefined && (\n        <rect\n          width={bbox.width + padding * 2}\n          height={bbox.height + padding * 2}\n          x={xm - bbox.width / 2 - padding}\n          y={ym - bbox.height + padding}\n          fill={rectFill}\n        ></rect>\n      )}\n      <text\n        x={bbox !== undefined ? xm - bbox.width / 2 : xm}\n        y={ym}\n        fill=\"black\"\n        ref={setTextRef}\n      >\n        {text}\n      </text>\n    </>\n  );\n});\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { rootStore } from \"../App\";\nimport { OperationView } from \"../operation/operation\";\nimport { ArrowView } from \"./arrow\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const ops = [...rootStore.operations.values()];\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        border: \"1px solid #eee\",\n        height: \"100%\",\n        background: \"#fff\",\n        margin: \"10px\",\n        borderRadius: \"6px\",\n      }}\n    >\n      {ops.map((operation) => {\n        console.log(operation);\n        return <OperationView operation={operation} key={operation.key} />;\n      })}\n      <svg style={{ width: \"100%\", height: \"100%\" }}>\n        {ops\n          .flatMap((op) => op.data.inputs.map((inp) => ({ from: inp, to: op })))\n          .map((arrow) => (\n            <ArrowView arrow={arrow} key={arrow.from.key + arrow.to.key} />\n          ))}\n      </svg>\n    </div>\n  );\n});\n","import { action, IObservableArray, observable, ObservableMap } from \"mobx\";\nimport { OperationModel } from \"../operation/operation-model\";\nimport { ArrowModel } from \"./arrow\";\n\nexport class RootStoreModel {\n  constructor(d: {\n    operations: ObservableMap<string, OperationModel>;\n    arrows: IObservableArray<ArrowModel>;\n  }) {\n    this.operations = d.operations;\n    this.arrows = d.arrows;\n  }\n  @observable\n  operations: ObservableMap<string, OperationModel>;\n  @observable\n  arrows: IObservableArray<ArrowModel>;\n  @observable\n  selection?: OperationModel;\n\n  @action\n  selectOperation = (operation: OperationModel) => {\n    this.selection = operation;\n  };\n}\n\n// export const RootStoreModel = types\n//   .model(\"RootStore\", {\n//     operations: types.map(OperationModel),\n//     arrows: types.array(ArrowModel),\n//     selection: types.maybeNull(types.reference(OperationModel)),\n//   })\n//   .actions((self) => ({\n//     selectOperation(operation: OperationModelT) {\n//       self.selection = operation;\n//     },\n//   }));\n\n// export interface RootStoreModelI extends Instance<typeof RootStoreModel> {}\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce((p, [k, v]) => {\n    if (v !== undefined) {\n      p[k as keyof typeof defaultResizeEnable] = v;\n    }\n    return p;\n  }, defaultResizeEnable);\n}\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport styled from \"styled-components\";\nimport { resizableEnable } from \"../utils\";\n\nconst MainList = styled.ul`\n  overflow-y: scroll;\n  height: 100%;\n  margin: 0;\n  padding: 0px 10px 25px;\n\n  .group {\n    padding-left: 10px;\n    padding-top: 3px;\n    padding-bottom: 3px;\n    border-top: 2px solid #eee;\n    margin-top: 6px;\n    .MuiListItemText-primary {\n      font-weight: bold;\n    }\n  }\n  .nested {\n    padding-left: 25px;\n    padding-top: 0px;\n    padding-bottom: 0px;\n  }\n`;\n\ntype Props = {};\n\nconst listItems = {\n  Model: [\"Input\", \"Loss\", \"Metric\", \"Optimizer\", \"Callback\"],\n  Layers: [\n    \"Convolutional\",\n    \"Dense\",\n    \"Recurrent\",\n    \"Transformer\",\n    \"Dropout\",\n    \"Embedding\",\n    \"Normalization\",\n  ],\n  Activations: [\"Softmax\", \"Sigmoid\", \"Relu\"],\n  \"Slice / Shape\": [\n    \"Concat\",\n    \"Gather\",\n    \"Stack\",\n    \"Tile\",\n    \"Slice\",\n    \"Split\",\n    \"Reshape\",\n    \"Traspose\",\n  ],\n};\n\nexport const MainMenu: React.FC<Props> = observer(() => {\n  return (\n    <Rnd\n      disableDragging={true}\n      maxWidth={300}\n      minWidth={200}\n      style={{\n        position: \"relative\",\n        maxHeight: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n      enableResizing={resizableEnable({\n        right: true,\n      })}\n    >\n      <input type=\"text\" />\n      <MainList>\n        <List component=\"nav\">\n          {Object.entries(listItems).map(([name, list]) => (\n            <Item key={name} name={name} list={list} />\n          ))}\n        </List>\n      </MainList>\n    </Rnd>\n  );\n});\n\ntype ItemProps = { name: string; list: string[] };\n\nexport const Item: React.FC<ItemProps> = observer(({ name, list }) => {\n  const [open, setOpen] = React.useState(true);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)} className=\"group\">\n        <ListItemText primary={name} />\n        <FontAwesomeIcon icon={open ? \"chevron-up\" : \"chevron-down\"} />\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {list.map((t) => (\n            <ListItem button key={t} className=\"nested\">\n              <ListItemText primary={t} />\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n    </>\n  );\n});\n\n/* <li>\n          <div>Aritmetic Operations</div>\n          <ul>\n            <li>Add</li>\n            <li>Sub</li>\n            <li>Mul</li>\n            <li>Div</li>\n            <li>Max</li>\n            <li>Min</li>\n            <li>Pow</li>\n            <li>Min</li>\n            <li>Exp</li>\n          </ul>\n        </li>\n\n        <li>\n          <div>Logic Operations</div>\n          <ul>\n            <li>Equal</li>\n            <li>Greater</li>\n            <li>Greater Equal</li>\n            <li>Less</li>\n            <li>Less Equal</li>\n            <li>And</li>\n            <li>Or</li>\n            <li>Not</li>\n            <li>Xor</li>\n            <li>Not Equal</li>\n            <li>Where</li>\n          </ul>\n        </li> */\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec, PP2 } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType,\n  MM extends { [key: string]: FieldSpec }\n> {\n  choices: C;\n  default: K;\n\n  constructor(v: { choices: C; default: K }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField: React.FC<PP2<MM, string>> = observer(({ name, model }) => {\n    let keys;\n    if (this.isObservableMap()) {\n      keys = Array.from(\n        (this.choices as any).keys() as IterableIterator<string>\n      );\n    } else {\n      keys = Object.keys(this.choices);\n    }\n\n    if (keys.length > 3) {\n      return (\n        <Select\n          value={model[name]}\n          onChange={(e) => {\n            model[name] = e.target.value as any;\n          }}\n          autoWidth={true}\n        >\n          {keys.map((k) => {\n            return (\n              <MenuItem key={k} value={k}>\n                {k}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      );\n    } else {\n      return (\n        <ButtonsDiv key={name}>\n          <ButtonGroup\n            size=\"small\"\n            color=\"primary\"\n            aria-label=\"outlined primary button group\"\n          >\n            {keys.map((k) => {\n              const buttonStyle =\n                k === (model[name] as any)\n                  ? { background: \"#3f51b5\", color: \"white\" }\n                  : {};\n\n              return (\n                <Button\n                  key={k}\n                  onClick={() => {\n                    model[name] = k as any;\n                  }}\n                  style={buttonStyle}\n                >\n                  {k}\n                </Button>\n              );\n            })}\n          </ButtonGroup>\n        </ButtonsDiv>\n      );\n    }\n  });\n}\n","import TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, SnapshotIn, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { OperationData } from \"../operation/operation-model\";\nimport { PP2 } from \"./\";\n\nconst _patternError = \"Pattern doesn't match.\";\nexport class PatternFieldSpec<\n  T,\n  Tr extends (value: string) => T,\n  KM extends string & keyof M,\n  M extends OperationData & { [key: string]: any },\n  MT extends IAnyType\n> {\n  default: T;\n  pattern: string | RegExp | ((state: M) => string | RegExp);\n  maxLength?: number;\n  minLength?: number;\n  transform: Tr;\n  transformFrom: (value: T) => string;\n  transformInto: MT;\n  deps?: string[];\n\n  constructor(v: {\n    default: T;\n    pattern: string | RegExp | ((state: M) => string | RegExp);\n    maxLength?: number;\n    minLength?: number;\n    transform: Tr;\n    transformInto: MT;\n    deps?: string[];\n    transformFrom?: (value: T) => string;\n  }) {\n    this.default = v.default;\n    this.pattern = v.pattern;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n    this.transform = v.transform;\n    this.transformInto = v.transformInto;\n    this.deps = v.deps;\n    this.transformFrom = v.transformFrom ?? JSON.stringify;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n\n      if (\n        this.pattern !== undefined &&\n        typeof this.pattern !== \"function\" &&\n        !this.default.match(this.pattern)\n      ) {\n        throw Error(\"RegExp pattern doesn't match\");\n      }\n    }\n\n    if (\n      (this.transform !== undefined && this.transformInto === undefined) ||\n      (this.transform === undefined && this.transformInto !== undefined)\n    ) {\n      throw Error(\"Transform\");\n    }\n  }\n\n  isTransformed = () => {\n    return (\n      (this.transform === undefined || this.transformInto === undefined) &&\n      typeof this.default === \"string\"\n    );\n  };\n\n  mobxProp = () => {\n    return types.optional(this.transformInto, this.default);\n  };\n\n  plotField = observer(({ name, model }: PP2<M, SnapshotIn<MT>>) => {\n    const [value, setValue] = React.useState(this.transformFrom(model[name]));\n    const errors = model.errors;\n    const deps =\n      this.deps !== undefined\n        ? [...this.deps.map((d) => model[d]), this.pattern, model]\n        : [this.pattern, model];\n\n    React.useEffect(() => {\n      if (this.pattern !== undefined && typeof this.pattern === \"function\") {\n        const err = errors.get(name);\n        if (err === _patternError) {\n          const match = value.match(this.pattern(model));\n          if (!(match === null || match.index !== 0)) {\n            errors.delete(name);\n          }\n        } else if (err === undefined) {\n          const match = value.match(this.pattern(model));\n          if (match === null || match.index !== 0) {\n            errors.set(name, _patternError);\n          }\n        }\n      }\n      // eslint-disable-next-line\n    }, [value, ...deps]);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value.replace(/\\s/g, \"\");\n          setValue(value);\n          const p =\n            typeof this.pattern === \"function\"\n              ? this.pattern(model)\n              : this.pattern;\n          const match = value.match(p);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else if (match === null || match?.index !== 0) {\n            errors.set(name, _patternError);\n          } else if (this.transform !== undefined) {\n            errors.delete(name);\n            model[name] = this.transform(value) as any;\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"120px\" }}\n      />\n    );\n  });\n}\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { FieldSpec, FieldSpecI, PP2 } from \"./\";\n\nexport class StrFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, string> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n\n  constructor(v: { default: string; maxLength?: number; minLength?: number }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, string>) => {\n    const [value, setValue] = React.useState(model[name]);\n    const errors = model.errors;\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value;\n          setValue(value as any);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"120px\" }}\n      />\n    );\n  });\n}\n\nexport class BoolFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, boolean> {\n  default: boolean;\n  required?: boolean;\n\n  constructor(v: { default: boolean; required?: boolean }) {\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, boolean>) => {\n    return (\n      <Switch\n        checked={model[name]}\n        onChange={() => {\n          model[name] = !model[name] as any;\n        }}\n        color=\"primary\"\n      />\n    );\n  });\n}\n\nexport class NumFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, number> {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(({ name, model }: PP2<M, number>) => {\n    const [value, setValue] = React.useState(\n      ((model[name] as any) as number).toString()\n    );\n    const errors = model.errors;\n    const error = errors.get(name);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{\n          min: this.min,\n          max: this.max,\n          step: this.step,\n          style: { textAlign: \"center\" },\n        }}\n        type=\"number\"\n        error={error !== undefined}\n        fullWidth={true}\n        style={{ width: \"80px\" }}\n        onChange={(e) => {\n          let value = e.target.value;\n          if (this.min !== undefined && this.min >= 0) {\n            value = value.replace(/-/g, \"\");\n          }\n          if (this.isInt) {\n            value = value.replace(/\\./g, \"\");\n          }\n          setValue(value);\n\n          let num: number;\n          if (this.isInt) {\n            num = parseInt(value, 10);\n          } else {\n            num = parseFloat(value);\n          }\n\n          if (Number.isNaN(num)) {\n            errors.set(name, \"Invalid\");\n          } else if (this.min !== undefined && this.min > num) {\n            errors.set(name, `Smaller than minimum ${this.min}`);\n          } else if (this.max !== undefined && this.max < num) {\n            errors.set(name, `Greater than maximum ${this.max}`);\n          } else {\n            errors.delete(name);\n            model[name] = num as any;\n          }\n        }}\n      />\n    );\n  });\n}\n","import { computed, decorate, IObservableArray, observable, ObservableMap } from \"mobx\";\nimport { SnapshotIn, types } from \"mobx-state-tree\";\nimport { BoolFieldSpec, ChoiceFieldSpec, FieldSpec, NumFieldSpec, PatternFieldSpec } from \"../fields/\";\nimport { listToMap } from \"../utils\";\nimport { Shape } from \"./operation\";\nimport { OperationModel } from \"./operation-model\";\n\nconst dimensionMap = { \"1D\": 1, \"2D\": 2, \"3D\": 3 };\nfunction shapeFromDim(dim: number) {\n  if (dim === 3) {\n    return /\\d+|\\[\\d+\\]|\\[\\d+,\\d+\\]|\\[\\d+,\\d+,\\d+\\]/;\n  } else if (dim === 2) {\n    return /\\d+|\\[\\d+\\]|\\[\\d+,\\d+\\]/;\n  } else {\n    return /\\d+|\\[\\d+\\]/;\n  }\n}\n\nconst parseArrayFromString = (value: string) => {\n  const ans = JSON.parse(value.replace(\",]\", \"]\"));\n  if (typeof ans === \"number\") return [ans];\n  return ans;\n};\n\nconst parseArrayFromStringWithUndefined = (value: string) => {\n  const ans = JSON.parse(value.replace(\"?\", \"null\").replace(\",]\", \"]\"));\n  if (typeof ans === \"number\") return [ans];\n  if (ans === null) return [undefined];\n  return ans.map((v: number | null) => (v === null ? undefined : v));\n};\n\nconst extractShapePattern = (s: any) =>\n  shapeFromDim(dimensionMap[s.dimensions as keyof typeof dimensionMap]);\n\nexport type OperationI<V extends { [key: string]: FieldSpec }> = {\n  [key in keyof V]: SnapshotIn<ReturnType<V[key][\"mobxProp\"]>>;\n} & {\n  NAME: string;\n  spec: V;\n  outputShape: Shape;\n  inputs: IObservableArray<OperationModel>;\n  nInputs: number;\n  validInput(op: OperationModel): boolean;\n  errors: ObservableMap<keyof V, string>;\n};\n\nconst mobxDecorators = <V extends { [key: string]: FieldSpec }>(spec: V) => {\n  return {\n    ...Object.keys(spec).reduce((p, c) => {\n      p[c as keyof V] = observable;\n      return p;\n    }, {} as { [key in keyof V]: PropertyDecorator }),\n    inputs: observable,\n    errors: observable,\n    outputShape: computed,\n  };\n};\n\nconst ConvolutionOpData = {\n  dimensions: new ChoiceFieldSpec({\n    choices: dimensionMap,\n    default: \"1D\",\n  }),\n  filters: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n  kernelSize: new PatternFieldSpec({\n    default: [3],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: parseArrayFromString,\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  padding: new ChoiceFieldSpec({\n    choices: listToMap([\"VALID\", \"SAME\", \"CAUSAL\"]),\n    default: \"SAME\",\n  }),\n  // filterType: new ChoiceFieldSpec({\n  //   choices: { STRIDED: \"STRIDED\", DILATED: \"DILATED\" },\n  //   default: \"STRIDED\",\n  // }),\n  stride: new PatternFieldSpec({\n    default: [2],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: parseArrayFromString,\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  dilationRate: new PatternFieldSpec({\n    default: [1],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: parseArrayFromString,\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  trainable: new BoolFieldSpec({ default: true }),\n};\n\nconst replicateIfOne = (initial: number[], len: number) => {\n  let v;\n  if (initial.length === 1) {\n    v = Array(len).fill(initial[0]) as number[];\n  } else {\n    v = initial;\n  }\n  return v;\n};\n\nexport class ConvolutionOp implements OperationI<typeof ConvolutionOpData> {\n  NAME: string = \"Convolution\";\n  spec = ConvolutionOpData;\n\n  constructor(\n    d: {\n      dimensions?: keyof typeof dimensionMap;\n      filters?: number;\n      kernelSize?: number[];\n      padding?: \"VALID\" | \"SAME\" | \"CAUSAL\";\n      stride?: number[];\n      dilationRate?: number[];\n      trainable?: boolean;\n      inputs?: OperationModel[];\n    } = {}\n  ) {\n    this.dimensions = d.dimensions ?? ConvolutionOpData.dimensions.default;\n    this.filters = d.filters ?? ConvolutionOpData.filters.default;\n    this.kernelSize = d.kernelSize ?? ConvolutionOpData.kernelSize.default;\n    this.padding = d.padding ?? ConvolutionOpData.padding.default;\n    this.stride = d.stride ?? ConvolutionOpData.stride.default;\n    this.dilationRate =\n      d.dilationRate ?? ConvolutionOpData.dilationRate.default;\n    this.trainable = d.trainable ?? ConvolutionOpData.trainable.default;\n    this.inputs = d.inputs ? observable.array(d.inputs) : observable.array([]);\n  }\n\n  nInputs: number = 1;\n  validInput = (op: OperationModel): boolean => {\n    return op.data.outputShape.length === dimensionMap[this.dimensions] + 1;\n  };\n\n  dimensions: keyof typeof dimensionMap;\n  filters: number = ConvolutionOpData.filters.default;\n  kernelSize: number[] = ConvolutionOpData.kernelSize.default;\n  padding: \"VALID\" | \"SAME\" | \"CAUSAL\" = ConvolutionOpData.padding.default;\n  // filterType: \"STRIDED\" | \"DILATED\" = ConvolutionOpData.filterType.default;\n  stride: number[] = ConvolutionOpData.stride.default;\n  dilationRate: number[] = ConvolutionOpData.dilationRate.default;\n  trainable: boolean = ConvolutionOpData.trainable.default;\n\n  inputs: IObservableArray<OperationModel>;\n  errors = observable.map<keyof typeof ConvolutionOpData, string>();\n\n  get outputShape(): Shape {\n    if (this.inputs.length === 0 || this.errors.size > 0) return [];\n    const input = this.inputs[0].data.outputShape;\n    if (input === []) return [];\n\n    const stride = replicateIfOne(this.stride, dimensionMap[this.dimensions]);\n\n    const result: Shape = [input[0]];\n    switch (this.padding) {\n      case \"CAUSAL\":\n      case \"SAME\":\n        for (let i = 0; i < stride.length; i++) {\n          const v = input[i + 1];\n          result.push(v !== undefined ? Math.ceil(v / stride[i]) : undefined);\n        }\n        break;\n      case \"VALID\": {\n        const kernelSize = replicateIfOne(\n          this.kernelSize,\n          dimensionMap[this.dimensions]\n        );\n        for (let i = 0; i < stride.length; i++) {\n          const v = input[i + 1];\n          if (v === undefined) {\n            result.push(undefined);\n            continue;\n          }\n          result.push(Math.ceil((v - kernelSize[i] + 1) / stride[i]));\n        }\n        break;\n      }\n    }\n    return result;\n  }\n}\n\ndecorate(ConvolutionOp, mobxDecorators(ConvolutionOpData));\n\nconst DenseOpData = {\n  units: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n  useBias: new BoolFieldSpec({ default: true }),\n};\n\nexport class DenseOp implements OperationI<typeof DenseOpData> {\n  spec = DenseOpData;\n  NAME = \"Dense\";\n\n  constructor(\n    d: {\n      units?: number;\n      useBias?: boolean;\n      inputs?: OperationModel[];\n    } = {}\n  ) {\n    this.units = d.units ?? DenseOpData.units.default;\n    this.useBias = d.useBias ?? DenseOpData.useBias.default;\n    this.inputs = d.inputs ? observable.array(d.inputs) : observable.array([]);\n  }\n  units: number;\n  useBias: boolean;\n\n  nInputs = 1;\n  validInput = (op: OperationModel): boolean => {\n    return op.data.outputShape.length === 2;\n  };\n\n  get outputShape(): Shape {\n    const input = this.inputs[0];\n    if (!input) {\n      return [undefined];\n    }\n    return [input.data.outputShape[0], this.units];\n  }\n\n  inputs: IObservableArray<OperationModel>;\n  errors: ObservableMap<keyof typeof DenseOpData, string> = observable.map();\n}\n\ndecorate(DenseOp, mobxDecorators(DenseOpData));\n\nenum DType {\n  float32 = \"float32\",\n  int32 = \"int32\",\n  bool = \"bool\",\n  complex64 = \"complex64\",\n  string = \"string\",\n}\n\nconst InputOpData = {\n  shape: new PatternFieldSpec({\n    default: [undefined, 10],\n    pattern: /(\\d+|\\?)|\\[(\\d+|\\?)(,\\d+)*(,)?\\]/,\n    transform: parseArrayFromStringWithUndefined,\n    transformFrom: (v) => JSON.stringify(v).replace(\"null\", \"?\"),\n    transformInto: types.union(\n      types.maybe(types.number),\n      types.array(types.maybe(types.number))\n    ),\n  }),\n  dtype: new ChoiceFieldSpec({\n    default: \"float32\",\n    choices: listToMap(Object.values(DType)),\n  }),\n};\n\nexport class InputOp implements OperationI<typeof InputOpData> {\n  NAME: string = \"Input\";\n  spec = InputOpData;\n\n  constructor(\n    d: {\n      shape?: (number | undefined)[];\n      dtype?: keyof typeof DType;\n      inputs?: OperationModel[];\n    } = {}\n  ) {\n    this.shape = d.shape ?? InputOpData.shape.default;\n    this.dtype = d.dtype ?? InputOpData.dtype.default;\n    this.inputs = d.inputs ? observable.array(d.inputs) : observable.array([]);\n  }\n  shape: Shape;\n  dtype: keyof typeof DType;\n\n  nInputs: number = 0;\n  validInput = (_: OperationModel): boolean => {\n    return false;\n  };\n\n  get outputShape(): Shape {\n    return this.shape;\n  }\n\n  inputs: IObservableArray<OperationModel>;\n  errors: ObservableMap<keyof typeof InputOpData, string> = observable.map();\n}\n\ndecorate(InputOp, mobxDecorators(InputOpData));\n\n// export const _DenseOp = createOp(\n//   \"Dense\",\n//   {\n//     units: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n//     useBias: new BoolFieldSpec({ default: true }),\n//   },\n//   (m) => {\n//     return [];\n//   }\n// );\n\n// export const _ConvolutionOp = createOp(\n//   \"Convolution\",\n//   {\n//     dimensions: new ChoiceFieldSpec({\n//       choices: dimensionMap,\n//       default: \"1D\",\n//     }),\n//     filters: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n//     kernelSize: (() =>\n//       new PatternFieldSpec({\n//         default: [3],\n//         pattern: extractShapePattern,\n//         deps: [\"dimensions\"],\n//         transform: (value: string) => JSON.parse(value),\n//         transformInto: types.union(types.number, types.array(types.number)),\n//       }))(),\n//     padding: new ChoiceFieldSpec({\n//       choices: listToMap([\"VALID\", \"SAME\", \"CAUSAL\"]),\n//       default: \"SAME\",\n//     }),\n//     filterType: new ChoiceFieldSpec({\n//       choices: { STRIDED: \"STRIDED\", DILATED: \"DILATED\" },\n//       default: \"STRIDED\",\n//     }),\n//     filter: new PatternFieldSpec({\n//       default: [1],\n//       pattern: extractShapePattern,\n//       deps: [\"dimensions\"],\n//       transform: (value: string) => JSON.parse(value),\n//       transformInto: types.union(types.number, types.array(types.number)),\n//     }),\n//     trainable: new BoolFieldSpec({ default: true }),\n//   },\n//   (m, l) => {\n//     l[0].from.data.outputShape();\n//     return [];\n//   }\n// );\n\n// export const InputOp = createOp(\n//   \"Input\",\n//   {\n//     shape: new PatternFieldSpec({\n//       default: [undefined, 10],\n//       pattern: /(\\d+|\\?)|\\[(\\d+|\\?)(,\\d+)+ (,)?\\]/,\n//       transform: (value: string) =>\n//         JSON.parse(value.replace(\"?\", \"undefined\").replace(\",]\", \"]\")),\n//       transformInto: types.union(\n//         types.maybe(types.number),\n//         types.array(types.maybe(types.number))\n//       ),\n//     }),\n//     dtype: new ChoiceFieldSpec({\n//       default: \"float32\",\n//       choices: listToMap(Object.values(DType)),\n//     }),\n//   },\n//   (m, b) => {\n//     return [];\n//   }\n// );\n","import { action, observable } from \"mobx\";\nimport { ConvolutionOp, DenseOp, InputOp } from \"./layers\";\n\nexport type OperationData = ConvolutionOp | DenseOp | InputOp;\n\nexport class OperationModel {\n  constructor(d: {\n    key: string;\n    name: string;\n    x: number;\n    y: number;\n    data: OperationData;\n  }) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.data = d.data;\n  }\n\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width: number = 60;\n  @observable\n  height: number = 60;\n  @observable\n  data: OperationData;\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n}\n\n// export const OperationModel = types\n//   .model(\"Operation\", {\n//     key: types.identifier,\n//     name: types.string,\n//     x: types.number,\n//     y: types.number,\n//     width: types.maybe(types.number),\n//     height: types.maybe(types.number),\n//     data: types.union(ConvolutionOp, DenseOp),\n//   })\n//   .actions((self) => ({\n//     move(dx: number, dy: number) {\n//       self.x += dx;\n//       self.y += dy;\n//     },\n//     setSize(rect: DOMRect) {\n//       self.width = rect.width;\n//       self.height = rect.height;\n//     },\n//     setName(name: string) {\n//       self.name = name;\n//     },\n//   }));\n\n// export interface OperationModelT extends Instance<typeof OperationModel> {}\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { OperationData } from \"../operation/operation-model\";\n\ntype Props<M extends OperationData> = {\n  self: M;\n};\n\nexport const PropertiesTable = observer(\n  <M extends OperationData>({ self }: Props<M>) => {\n    return (\n      <form>\n        <PropertiesTableStyled>\n          <thead>\n            <tr>\n              <td>Property</td>\n              <td>Value</td>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(self.spec).map(([k, v]) => (\n              <tr key={k}>\n                <td>{k}</td>\n                <td>\n                  <v.plotField name={k as keyof M} model={self} />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </PropertiesTableStyled>\n      </form>\n    );\n  }\n);\n\nconst PropertiesTableStyled = styled.table`\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { rootStore } from \"../App\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTable } from \"./properties-table\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  let inner;\n  if (rootStore.selection != null) {\n    const operation = rootStore.selection;\n    inner = (\n      <div\n        style={{ overflowY: \"auto\", maxHeight: \"100%\" }}\n        key={rootStore.selection.key}\n      >\n        <input\n          type=\"text\"\n          value={operation.name}\n          onInput={(e) => operation.setName(e.currentTarget.value)}\n          onChange={() => {}}\n        ></input>\n        <PropertiesTable\n          self={rootStore.selection.data}\n        />\n      </div>\n    );\n  } else {\n    inner = (\n      <div className=\"row\">\n        <div className=\"center\">Not Selected</div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        padding: \"15px\",\n        borderRadius: \"6px 6px 0 0\",\n        border: \"1px solid #eee\",\n        margin: \"0 10px\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","import { observable } from \"mobx\";\nimport React from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { RootStoreModel } from \"./canvas/store\";\nimport { MainMenu } from \"./graph-menu/main-menu\";\nimport { ConvolutionOp, DenseOp, InputOp } from \"./operation/layers\";\nimport { OperationModel } from \"./operation/operation-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\n\n// Regularizer, Constraint, Initializer,\n// dilationRate (number|[number]|[number, number]|[number, number, number])\n// The dilation rate to use for the dilated convolution in each dimension.\n// Should be an integer or array of two or three integers.\n\n// strides (number|number[]) The strides of the convolution in each dimension.\n// If strides is a number, strides in both dimensions are equal.\n// Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.\n\nconst input1 = new OperationModel({\n  key: \"input1\",\n  name: \"Input 1\",\n  x: 72,\n  y: 60,\n  data: new InputOp(),\n});\n\nconst dense1 = new OperationModel({\n  key: \"dense1\",\n  name: \"Dense 1\",\n  x: 261,\n  y: 170,\n  data: new DenseOp({ inputs: [input1] }),\n});\nconst conv1 = new OperationModel({\n  key: \"conv1\",\n  name: \"Conv 1\",\n  x: 441,\n  y: 316,\n  data: new ConvolutionOp({ inputs: [dense1] }),\n});\n\nconst dense2 = new OperationModel({\n  key: \"dense2\",\n  name: \"Dense 2\",\n  x: 211,\n  y: 410,\n  data: new DenseOp({ inputs: [conv1, dense1] }),\n});\n\nexport const rootStore = new RootStoreModel({\n  operations: observable.map({\n    input1,\n    dense1,\n    conv1,\n    dense2,\n  }),\n  arrows: observable.array([]),\n});\n\nexport function App() {\n  return (\n    <div\n      className=\"row\"\n      style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n    >\n      <MainMenu />\n      <div\n        className=\"col\"\n        style={{ width: \"100%\", background: \"rgba(250,250,250,0.7)\" }}\n      >\n        <MainCanvas />\n        <PropertiesView />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}