{"version":3,"sources":["operation/operation.tsx","canvas/arrow.tsx","canvas/canvas.tsx","operation/operation-model.tsx","canvas/store.tsx","fields/choice-field.tsx","fields/pattern-field.tsx","fields/primitive-field.tsx","utils.ts","operation/layers.tsx","graph-menu/main-menu.tsx","properties/properties-table.tsx","properties/properties-view.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyledOperation","styled","div","OperationView","observer","operation","onDrag","React","useCallback","_","data","move","deltaX","deltaY","selectingInput","undefined","rootStore","selectingInputFor","isValidInput","validInput","onClick","console","log","assignInput","selectOperation","x","y","name","position","bounds","ref","e","setSize","getBoundingClientRect","style","cursor","triangleFromCenter","height","width","y0","ArrowView","changeX","changeY","arrow","from","to","shape","outputShape","x1","y1","x2","y2","dy","dx","m","Math","abs","xa","ya","xm","ym","degrees","atan2","PI","strokeWidth","stroke","d","onDoubleClick","RectAndText","text","map","v","join","transform","rectFill","padding","useState","textRef","setTextRef","prev","setPrev","bbox","getBBox","useEffect","id","setTimeout","clearTimeout","fill","MainCanvas","ops","operations","values","border","background","margin","borderRadius","key","flatMap","op","inputs","inp","OperationModel","this","observable","action","rect","RootStoreModel","arrows","selection","v4","NAME","set","window","addEventListener","selectingInputKeyListener","push","ev","removeEventListener","ButtonsDiv","ChoiceFieldSpec","choices","default","isObservableMap","keys","size","Symbol","toStringTag","mobxProp","types","optional","string","plotField","model","Array","Object","length","Select","value","onChange","target","autoWidth","k","MenuItem","ButtonGroup","color","aria-label","buttonStyle","Button","get","Error","PatternFieldSpec","pattern","maxLength","minLength","transformFrom","transformInto","deps","isTransformed","setValue","errors","err","match","index","delete","TextField","inputProps","textAlign","replace","p","error","fullWidth","JSON","stringify","BoolFieldSpec","required","boolean","Switch","checked","NumFieldSpec","min","max","step","isInt","number","toString","type","num","parseInt","parseFloat","Number","isNaN","round","listToMap","l","reduce","c","defaultResizeEnable","top","right","bottom","left","topRight","bottomRight","bottomLeft","topLeft","resizableEnable","f","entries","dimensionMap","parseArrayFromString","ans","parse","extractShapePattern","s","dim","dimensions","mobxDecorators","spec","computed","ConvolutionOpData","filters","kernelSize","union","array","stride","dilationRate","trainable","replicateIfOne","initial","len","ConvolutionOp","nInputs","input","result","i","ceil","decorate","DType","DenseOpData","units","useBias","DenseOp","InputOpData","maybe","dtype","InputOp","MainList","ul","layerToClass","Input","Convolutional","Dense","listItems","Model","Layers","Activations","MainMenu","disableDragging","maxWidth","minWidth","maxHeight","display","flexDirection","enableResizing","List","component","list","Item","open","setOpen","ListItem","button","className","ListItemText","primary","icon","Collapse","in","timeout","unmountOnExit","disablePadding","t","addOperation","PropertiesTable","self","fullOfInputs","PropertiesTableStyled","table","PropertiesView","inner","overflowY","onInput","setName","currentTarget","minHeight","boxShadow","enable","input1","dense1","conv1","dense2","App","Boolean","location","hostname","library","add","faChevronDown","faChevronUp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9805a3af.chunk.js","sourcesContent":["import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport Draggable, { DraggableData, DraggableEvent } from \"react-draggable\";\nimport styled from \"styled-components\";\nimport { rootStore } from \"../App\";\nimport { OperationModel } from \"./operation-model\";\n\nexport type Shape = (number | undefined)[];\n\nconst StyledOperation = styled.div`\n  z-index: 1;\n  cursor: pointer;\n  position: absolute;\n  box-shadow: 0 1px 4px 1px #eee;\n  padding: 6px;\n  background: #fff;\n  border-radius: 6;\n  border: 1px solid #eee;\n`;\n\ntype OperationViewProps = { operation: OperationModel };\nexport const OperationView: React.FC<OperationViewProps> = observer(\n  ({ operation }) => {\n    const onDrag = React.useCallback(\n      (_: DraggableEvent, data: DraggableData) => {\n        operation.move(data.deltaX, data.deltaY);\n      },\n      [operation]\n    );\n    const selectingInput = rootStore.selectingInputFor !== undefined;\n    const isValidInput =\n      selectingInput && rootStore.selectingInputFor!.data.validInput(operation);\n\n    const onClick = React.useCallback(\n      (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        console.log(operation);\n        if (selectingInput) {\n          if (isValidInput) {\n            rootStore.assignInput(operation);\n          }\n        } else {\n          rootStore.selectOperation(operation);\n        }\n      },\n      [operation, selectingInput, isValidInput]\n    );\n    // const [_, setDivRef] = React.useState<HTMLDivElement | null>(null);\n    const { x, y, name } = operation;\n\n    return (\n      <Draggable onDrag={onDrag} position={{ x, y }} bounds=\"parent\">\n        <StyledOperation\n          ref={(e) => {\n            if (e === null) return;\n            operation.setSize(e.getBoundingClientRect());\n          }}\n          onClick={onClick}\n          style={\n            selectingInput\n              ? { cursor: isValidInput ? \"pointer\" : \"not-allowed\" }\n              : undefined\n          }\n        >\n          {`Layer ${name}`}\n        </StyledOperation>\n      </Draggable>\n    );\n  }\n);\n\n// export const createOp = <V extends { [key: string]: FieldSpec }>(\n//   name: string,\n//   data: V,\n//   outputShape: (\n//     model: Instance<\n//       IModelType<{ [key in keyof V]: ReturnType<V[key][\"mobxProp\"]> }, {}>\n//     >,\n//     inputs: OperationModelT[]\n//   ) => Shape\n// ) => {\n//   const props = Object.entries(data).reduce(\n//     (acc, [k, v]) => {\n//       acc[k as keyof V] = v.mobxProp() as any;\n//       return acc;\n//     },\n//     {} as {\n//       [key in keyof V]: ReturnType<V[key][\"mobxProp\"]>;\n//     }\n//   );\n\n//   return types\n//     .model(name, {\n//       ...props,\n//       OP_TYPE: types.optional(types.literal(name), name),\n//       inputs: types.array(types.reference(types.late(() => OperationModel))),\n//     })\n//     .actions((self) => ({\n//       setValue<K extends string & keyof V>(name: K, value: any) {\n//         self[name] = value;\n//       },\n//     }))\n//     .views((self) => {\n//       const errors = observable.map<string, string>();\n//       return {\n//         outputShape(): Shape {\n//           return outputShape(self as any, self.inputs);\n//         },\n//         errorsMap() {\n//           return errors;\n//         },\n//         form() {\n//           return <PropertiesTable self={self} errors={errors} data={data} />;\n//         },\n//       };\n//     });\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { OperationModel } from \"../operation/operation-model\";\n\nexport type ArrowModel = {\n  from: OperationModel;\n  to: OperationModel;\n};\n\n// export const ArrowModel = types.model(\"Arrow\", {\n//   key: types.identifier,\n//   from: types.reference(OperationModel),\n//   to: types.reference(OperationModel),\n//   shape: types.array(types.maybe(types.integer)),\n// });\n\n// export interface ArrowModelT extends Instance<typeof ArrowModel> {}\n\ntype ArrowViewProps = { arrow: ArrowModel };\n\nconst triangleFromCenter = (\n  x: number,\n  y: number,\n  height: number = 14,\n  width: number = 14\n) => {\n  const y0 = y + height;\n  return `M${x} ${y} L${x - width / 2} ${y0} L${x + width / 2} ${y0} Z`;\n};\n\nexport const ArrowView: React.FC<ArrowViewProps> = observer(\n  ({ arrow }: ArrowViewProps) => {\n    const { from, to } = arrow;\n    const shape = from.data.outputShape;\n\n    const [x1, y1, x2, y2] = [\n      from.x + from.width / 2,\n      from.y + from.height / 2,\n      to.x + to.width / 2,\n      to.y + to.height / 2,\n    ];\n    const dy = y2 - y1;\n    const dx = x2 - x1;\n\n    let changeX;\n    let changeY;\n    if (dx === 0) {\n      changeX = 0;\n      changeY = ((y2 > y1 ? 1 : -1) * to.height) / 2;\n    } else if (dy === 0) {\n      changeY = 0;\n      changeX = ((x2 > x1 ? 1 : -1) * to.width) / 2;\n    } else {\n      const m = Math.abs(dy / dx);\n      const [deltaX, deltaY] =\n        m > to.height / to.width\n          ? [to.height / 2 / m, to.height / 2]\n          : [to.width / 2, (to.width / 2) * m];\n      changeY = (y2 > y1 ? 1 : -1) * deltaY;\n      changeX = (x2 > x1 ? 1 : -1) * deltaX;\n    }\n    const xa = x2 - changeX;\n    const ya = y2 - changeY;\n\n    const [xm, ym] = [(x1 + x2) / 2, (y1 + y2) / 2];\n    const degrees = 90 + (Math.atan2(y2 - y1, x2 - x1) * 180) / Math.PI;\n\n    return (\n      <>\n        <path\n          style={{ strokeWidth: 2, stroke: \"black\" }}\n          d={`M${x1} ${y1} L${x2} ${y2}`}\n          onDoubleClick={(e) => {\n            console.log(e);\n          }}\n        />\n        <RectAndText\n          text={`[${shape.map((v) => v || \"?\").join(\", \")}]`}\n          x={xm}\n          y={ym}\n        />\n        <path\n          d={triangleFromCenter(xa, ya)}\n          transform={`rotate(${degrees} ${xa} ${ya})`}\n        />\n      </>\n    );\n  }\n);\n\nconst RectAndText: React.FC<{\n  text: string;\n  x: number;\n  y: number;\n  rectFill?: string;\n  padding?: number;\n}> = observer(({ text, x: xm, y: ym, rectFill = \"#eee\", padding = 3 }) => {\n  const [textRef, setTextRef] = React.useState<SVGTextElement | null>(null);\n  const [prev, setPrev] = React.useState(text);\n  const bbox = textRef?.getBBox();\n  React.useEffect(() => {\n    if (prev !== text) {\n      const id = setTimeout(() => setPrev(text), 0);\n      return () => clearTimeout(id);\n    }\n  });\n\n  return (\n    <>\n      {bbox !== undefined && (\n        <rect\n          width={bbox.width + padding * 2}\n          height={bbox.height + padding * 2}\n          x={xm - bbox.width / 2 - padding}\n          y={ym - bbox.height + padding}\n          fill={rectFill}\n        ></rect>\n      )}\n      <text\n        x={bbox !== undefined ? xm - bbox.width / 2 : xm}\n        y={ym}\n        fill=\"black\"\n        ref={setTextRef}\n      >\n        {text}\n      </text>\n    </>\n  );\n});\n\n// const getBoxIntersection = (from: OperationModelT, to: OperationModelT) => {\n//   const fwidth = from.width || 60;\n//   const fheight = from.width || 60;\n//   const twidth = to.width || 60;\n//   const theight = to.width || 60;\n\n//   const [x1, y1, x2, y2] = [\n//     from.x + fwidth / 2,\n//     from.y + fheight / 2,\n//     to.x + twidth / 2,\n//     to.y + theight / 2\n//   ];\n//   const dy = y2 - y1;\n//   const dx = x2 - x1;\n//   if (dx === 0 || dy === 0) {\n//   }\n//   const m = dy / dx;\n\n//   const degrees = 90 + (Math.atan2(dy, dx) * 180) / Math.PI;\n//   let xpos = x2 > x1 ? 1 : -1;\n//   const interY = (y2 - y1) / m;\n//   const interX = x2 * m + y1;\n// };\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { rootStore } from \"../App\";\nimport { OperationView } from \"../operation/operation\";\nimport { ArrowView } from \"./arrow\";\n\ntype Props = {};\n\nexport const MainCanvas: React.FC<Props> = observer(() => {\n  const ops = [...rootStore.operations.values()];\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        border: \"1px solid #eee\",\n        height: \"100%\",\n        background: \"#fff\",\n        margin: \"10px\",\n        borderRadius: \"6px\",\n      }}\n    >\n      {ops.map((operation) => {\n        console.log(operation);\n        return <OperationView operation={operation} key={operation.key} />;\n      })}\n      <svg style={{ width: \"100%\", height: \"100%\" }}>\n        {ops\n          .flatMap((op) => op.data.inputs.map((inp) => ({ from: inp, to: op })))\n          .map((arrow) => (\n            <ArrowView arrow={arrow} key={arrow.from.key + arrow.to.key} />\n          ))}\n      </svg>\n    </div>\n  );\n});\n","import { action, observable } from \"mobx\";\nimport { ConvolutionOp, DenseOp, InputOp } from \"./layers\";\n\nexport type OperationData = ConvolutionOp | DenseOp | InputOp;\n\nexport class OperationModel {\n  constructor(d: {\n    key: string;\n    name: string;\n    x: number;\n    y: number;\n    data: OperationData;\n  }) {\n    this.key = d.key;\n    this.name = d.name;\n    this.x = d.x;\n    this.y = d.y;\n    this.data = d.data;\n  }\n\n  @observable\n  key: string;\n  @observable\n  name: string;\n  @observable\n  x: number;\n  @observable\n  y: number;\n  @observable\n  width: number = 60;\n  @observable\n  height: number = 60;\n  @observable\n  data: OperationData;\n\n  @action\n  move = (dx: number, dy: number) => {\n    this.x += dx;\n    this.y += dy;\n  };\n  @action\n  setSize = (rect: DOMRect) => {\n    this.width = rect.width;\n    this.height = rect.height;\n  };\n  @action\n  setName = (name: string) => {\n    this.name = name;\n  };\n}\n\n// export const OperationModel = types\n//   .model(\"Operation\", {\n//     key: types.identifier,\n//     name: types.string,\n//     x: types.number,\n//     y: types.number,\n//     width: types.maybe(types.number),\n//     height: types.maybe(types.number),\n//     data: types.union(ConvolutionOp, DenseOp),\n//   })\n//   .actions((self) => ({\n//     move(dx: number, dy: number) {\n//       self.x += dx;\n//       self.y += dy;\n//     },\n//     setSize(rect: DOMRect) {\n//       self.width = rect.width;\n//       self.height = rect.height;\n//     },\n//     setName(name: string) {\n//       self.name = name;\n//     },\n//   }));\n\n// export interface OperationModelT extends Instance<typeof OperationModel> {}\n","import { action, IObservableArray, observable, ObservableMap } from \"mobx\";\nimport { v4 } from \"uuid\";\nimport { OperationData, OperationModel } from \"../operation/operation-model\";\nimport { ArrowModel } from \"./arrow\";\n\nexport class RootStoreModel {\n  constructor(d: {\n    operations: ObservableMap<string, OperationModel>;\n    arrows: IObservableArray<ArrowModel>;\n  }) {\n    this.operations = d.operations;\n    this.arrows = d.arrows;\n  }\n  @observable\n  operations: ObservableMap<string, OperationModel>;\n  @observable\n  arrows: IObservableArray<ArrowModel>;\n  @observable\n  selection?: OperationModel;\n  @observable\n  selectingInputFor?: OperationModel;\n\n  @action\n  selectOperation = (operation: OperationModel) => {\n    this.selection = operation;\n  };\n\n  @action\n  addOperation = (data: OperationData) => {\n    const op = new OperationModel({\n      data,\n      key: v4(),\n      name: data.NAME,\n      x: 100,\n      y: 100,\n    });\n    this.operations.set(op.key, op);\n  };\n\n  @action\n  selectingInput = (operation: OperationModel) => {\n    this.selectingInputFor = operation;\n    window.addEventListener(\"keyup\", this.selectingInputKeyListener);\n  };\n\n  @action\n  assignInput = (operation: OperationModel) => {\n    this.selectingInputFor!.data.inputs.push(operation);\n    this.selectingInputFor = undefined;\n  };\n\n  @action\n  selectingInputKeyListener = (ev: KeyboardEvent) => {\n    if (ev.key === \"Escape\") {\n      this.selectingInputFor = undefined;\n      window.removeEventListener(\"keyup\", this.selectingInputKeyListener);\n    }\n  };\n}\n\n// export const RootStoreModel = types\n//   .model(\"RootStore\", {\n//     operations: types.map(OperationModel),\n//     arrows: types.array(ArrowModel),\n//     selection: types.maybeNull(types.reference(OperationModel)),\n//   })\n//   .actions((self) => ({\n//     selectOperation(operation: OperationModelT) {\n//       self.selection = operation;\n//     },\n//   }));\n\n// export interface RootStoreModelI extends Instance<typeof RootStoreModel> {}\n","import Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, IMSTMap, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { FieldSpec, PP2 } from \"./\";\n\nconst ButtonsDiv = styled.div`\n  min-height: 38px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport class ChoiceFieldSpec<\n  V,\n  K extends C extends IMSTMap<M> ? string : string & keyof C,\n  C extends { [key: string]: V } | IMSTMap<M>,\n  M extends IAnyType,\n  MM extends { [key: string]: FieldSpec }\n> {\n  choices: C;\n  default: K;\n\n  constructor(v: { choices: C; default: K }) {\n    this.choices = v.choices;\n    this.default = v.default;\n    if (this.isObservableMap()) {\n      if ((this.choices as any).get(this.default) === null) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  isObservableMap = () => {\n    return (\n      typeof this.choices.keys === \"function\" &&\n      typeof this.choices.size === \"number\" &&\n      Symbol.toStringTag in this.choices\n    );\n  };\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.string, this.default)\n      : types.string;\n\n  plotField: React.FC<PP2<MM, string>> = observer(({ name, model }) => {\n    let keys;\n    if (this.isObservableMap()) {\n      keys = Array.from(\n        (this.choices as any).keys() as IterableIterator<string>\n      );\n    } else {\n      keys = Object.keys(this.choices);\n    }\n\n    if (keys.length > 3) {\n      return (\n        <Select\n          value={model[name]}\n          onChange={(e) => {\n            model[name] = e.target.value as any;\n          }}\n          autoWidth={true}\n        >\n          {keys.map((k) => {\n            return (\n              <MenuItem key={k} value={k}>\n                {k}\n              </MenuItem>\n            );\n          })}\n        </Select>\n      );\n    } else {\n      return (\n        <ButtonsDiv key={name}>\n          <ButtonGroup\n            size=\"small\"\n            color=\"primary\"\n            aria-label=\"outlined primary button group\"\n          >\n            {keys.map((k) => {\n              const buttonStyle =\n                k === (model[name] as any)\n                  ? { background: \"#3f51b5\", color: \"white\" }\n                  : {};\n\n              return (\n                <Button\n                  key={k}\n                  onClick={() => {\n                    model[name] = k as any;\n                  }}\n                  style={buttonStyle}\n                >\n                  {k}\n                </Button>\n              );\n            })}\n          </ButtonGroup>\n        </ButtonsDiv>\n      );\n    }\n  });\n}\n","import TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { IAnyType, SnapshotIn, types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { OperationData } from \"../operation/operation-model\";\nimport { PP2 } from \"./\";\n\nconst _patternError = \"Pattern doesn't match.\";\nexport class PatternFieldSpec<\n  T,\n  Tr extends (value: string) => T,\n  KM extends string & keyof M,\n  M extends OperationData & { [key: string]: any },\n  MT extends IAnyType\n> {\n  default: T;\n  pattern: string | RegExp | ((state: M) => string | RegExp);\n  maxLength?: number;\n  minLength?: number;\n  transform: Tr;\n  transformFrom: (value: T) => string;\n  transformInto: MT;\n  deps?: string[];\n\n  constructor(v: {\n    default: T;\n    pattern: string | RegExp | ((state: M) => string | RegExp);\n    maxLength?: number;\n    minLength?: number;\n    transform: Tr;\n    transformInto: MT;\n    deps?: string[];\n    transformFrom?: (value: T) => string;\n  }) {\n    this.default = v.default;\n    this.pattern = v.pattern;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n    this.transform = v.transform;\n    this.transformInto = v.transformInto;\n    this.deps = v.deps;\n    this.transformFrom = v.transformFrom ?? JSON.stringify;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n\n      if (\n        this.pattern !== undefined &&\n        typeof this.pattern !== \"function\" &&\n        !this.default.match(this.pattern)\n      ) {\n        throw Error(\"RegExp pattern doesn't match\");\n      }\n    }\n\n    if (\n      (this.transform !== undefined && this.transformInto === undefined) ||\n      (this.transform === undefined && this.transformInto !== undefined)\n    ) {\n      throw Error(\"Transform\");\n    }\n  }\n\n  isTransformed = () => {\n    return (\n      (this.transform === undefined || this.transformInto === undefined) &&\n      typeof this.default === \"string\"\n    );\n  };\n\n  mobxProp = () => {\n    return types.optional(this.transformInto, this.default);\n  };\n\n  plotField = observer(({ name, model }: PP2<M, SnapshotIn<MT>>) => {\n    const [value, setValue] = React.useState(this.transformFrom(model[name]));\n    const errors = model.errors;\n    const deps =\n      this.deps !== undefined\n        ? [...this.deps.map((d) => model[d]), this.pattern, model]\n        : [this.pattern, model];\n\n    React.useEffect(() => {\n      if (this.pattern !== undefined && typeof this.pattern === \"function\") {\n        const err = errors.get(name);\n        if (err === _patternError) {\n          const match = value.match(this.pattern(model));\n          if (!(match === null || match.index !== 0)) {\n            errors.delete(name);\n          }\n        } else if (err === undefined) {\n          const match = value.match(this.pattern(model));\n          if (match === null || match.index !== 0) {\n            errors.set(name, _patternError);\n          }\n        }\n      }\n      // eslint-disable-next-line\n    }, [value, ...deps]);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value.replace(/\\s/g, \"\");\n          setValue(value);\n          const p =\n            typeof this.pattern === \"function\"\n              ? this.pattern(model)\n              : this.pattern;\n          const match = value.match(p);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else if (match === null || match?.index !== 0) {\n            errors.set(name, _patternError);\n          } else if (this.transform !== undefined) {\n            errors.delete(name);\n            model[name] = this.transform(value) as any;\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"120px\" }}\n      />\n    );\n  });\n}\n","import Switch from \"@material-ui/core/Switch\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { observer } from \"mobx-react-lite\";\nimport { types } from \"mobx-state-tree\";\nimport React from \"react\";\nimport { FieldSpec, FieldSpecI, PP2 } from \"./\";\n\nexport class StrFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, string> {\n  default: string;\n  maxLength?: number;\n  minLength?: number;\n\n  constructor(v: { default: string; maxLength?: number; minLength?: number }) {\n    this.default = v.default;\n    this.maxLength = v.maxLength;\n    this.minLength = v.minLength;\n\n    if (typeof this.default === \"string\") {\n      if (\n        this.minLength !== undefined &&\n        this.default.length < this.minLength\n      ) {\n        throw Error(\"\");\n      } else if (\n        this.maxLength !== undefined &&\n        this.default.length > this.maxLength\n      ) {\n        throw Error(\"\");\n      }\n    }\n  }\n\n  mobxProp = () => {\n    if (this.default !== undefined) {\n      return types.optional(types.string, this.default);\n    } else {\n      return types.string;\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, string>) => {\n    const [value, setValue] = React.useState(model[name]);\n    const errors = model.errors;\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{ style: { textAlign: \"center\" } }}\n        onChange={(e) => {\n          let value = e.target.value;\n          setValue(value as any);\n\n          if (this.maxLength !== undefined && value.length > this.maxLength) {\n            errors.set(name, \"Max length exceded.\");\n          } else if (\n            this.minLength !== undefined &&\n            value.length < this.minLength\n          ) {\n            errors.set(name, \"Min length exceded.\");\n          } else {\n            errors.delete(name);\n            model[name] = value as any;\n          }\n        }}\n        error={errors.get(name) !== undefined}\n        fullWidth={true}\n        style={{ width: \"120px\" }}\n      />\n    );\n  });\n}\n\nexport class BoolFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, boolean> {\n  default: boolean;\n  required?: boolean;\n\n  constructor(v: { default: boolean; required?: boolean }) {\n    this.default = v.default;\n    this.required = v.required !== undefined ? v.required : true;\n  }\n\n  mobxProp = () => {\n    if (this[\"default\"] === undefined) {\n      return types.boolean;\n    } else {\n      return types.optional(types.boolean, this.default);\n    }\n  };\n\n  plotField = observer(({ name, model }: PP2<M, boolean>) => {\n    return (\n      <Switch\n        checked={model[name]}\n        onChange={() => {\n          model[name] = !model[name] as any;\n        }}\n        color=\"primary\"\n      />\n    );\n  });\n}\n\nexport class NumFieldSpec<M extends { [key: string]: FieldSpec }>\n  implements FieldSpecI<M, number> {\n  default: number;\n  min?: number;\n  max?: number;\n  step?: number;\n  isInt: boolean;\n\n  constructor(v: {\n    default: number;\n    min?: number;\n    max?: number;\n    step?: number;\n    isInt?: boolean;\n  }) {\n    this.default = v.default;\n    this.min = v.min;\n    this.max = v.max;\n    this.step = v.step;\n    this.isInt = v.isInt !== undefined ? v.isInt : false;\n    if (this.min !== undefined && this.default < this.min) {\n      throw Error(\"\");\n    } else if (this.max !== undefined && this.default > this.max) {\n      throw Error(\"\");\n    }\n    if (this.isInt) {\n      this.default = Math.round(this.default);\n      if (this.step === undefined) {\n        this.step = 1;\n      } else {\n        this.step = Math.round(this.step);\n      }\n    }\n  }\n\n  mobxProp = () =>\n    this.default !== undefined\n      ? types.optional(types.number, this.default)\n      : types.number;\n\n  plotField = observer(({ name, model }: PP2<M, number>) => {\n    const [value, setValue] = React.useState(\n      ((model[name] as any) as number).toString()\n    );\n    const errors = model.errors;\n    const error = errors.get(name);\n\n    return (\n      <TextField\n        key={name}\n        value={value}\n        inputProps={{\n          min: this.min,\n          max: this.max,\n          step: this.step,\n          style: { textAlign: \"center\" },\n        }}\n        type=\"number\"\n        error={error !== undefined}\n        fullWidth={true}\n        style={{ width: \"80px\" }}\n        onChange={(e) => {\n          let value = e.target.value;\n          if (this.min !== undefined && this.min >= 0) {\n            value = value.replace(/-/g, \"\");\n          }\n          if (this.isInt) {\n            value = value.replace(/\\./g, \"\");\n          }\n          setValue(value);\n\n          let num: number;\n          if (this.isInt) {\n            num = parseInt(value, 10);\n          } else {\n            num = parseFloat(value);\n          }\n\n          if (Number.isNaN(num)) {\n            errors.set(name, \"Invalid\");\n          } else if (this.min !== undefined && this.min > num) {\n            errors.set(name, `Smaller than minimum ${this.min}`);\n          } else if (this.max !== undefined && this.max < num) {\n            errors.set(name, `Greater than maximum ${this.max}`);\n          } else {\n            errors.delete(name);\n            model[name] = num as any;\n          }\n        }}\n      />\n    );\n  });\n}\n","export function listToMap<T extends number | string>(l: Array<T>) {\n  return l.reduce((p, c) => {\n    p[c.toString()] = c;\n    return p;\n  }, {} as { [key: string]: T });\n}\n\nconst defaultResizeEnable = {\n  top: false,\n  right: false,\n  bottom: false,\n  left: false,\n  topRight: false,\n  bottomRight: false,\n  bottomLeft: false,\n  topLeft: false,\n};\n\nexport function resizableEnable(f: {\n  top?: boolean;\n  right?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  topRight?: boolean;\n  bottomRight?: boolean;\n  bottomLeft?: boolean;\n  topLeft?: boolean;\n}) {\n  return Object.entries(f).reduce((p, [k, v]) => {\n    if (v !== undefined) {\n      p[k as keyof typeof defaultResizeEnable] = v;\n    }\n    return p;\n  }, defaultResizeEnable);\n}\n","import { computed, decorate, IObservableArray, observable, ObservableMap } from \"mobx\";\nimport { SnapshotIn, types } from \"mobx-state-tree\";\nimport { BoolFieldSpec, ChoiceFieldSpec, FieldSpec, NumFieldSpec, PatternFieldSpec } from \"../fields/\";\nimport { listToMap } from \"../utils\";\nimport { Shape } from \"./operation\";\nimport { OperationModel } from \"./operation-model\";\n\nconst dimensionMap = { \"1D\": 1, \"2D\": 2, \"3D\": 3 };\nfunction shapeFromDim(dim: number) {\n  if (dim === 3) {\n    return /\\d+|\\[\\d+\\]|\\[\\d+,\\d+\\]|\\[\\d+,\\d+,\\d+\\]/;\n  } else if (dim === 2) {\n    return /\\d+|\\[\\d+\\]|\\[\\d+,\\d+\\]/;\n  } else {\n    return /\\d+|\\[\\d+\\]/;\n  }\n}\n\nconst parseArrayFromString = (value: string) => {\n  const ans = JSON.parse(value.replace(\",]\", \"]\"));\n  if (typeof ans === \"number\") return [ans];\n  return ans;\n};\n\nconst parseArrayFromStringWithUndefined = (value: string) => {\n  const ans = JSON.parse(value.replace(\"?\", \"null\").replace(\",]\", \"]\"));\n  if (typeof ans === \"number\") return [ans];\n  if (ans === null) return [undefined];\n  return ans.map((v: number | null) => (v === null ? undefined : v));\n};\n\nconst extractShapePattern = (s: any) =>\n  shapeFromDim(dimensionMap[s.dimensions as keyof typeof dimensionMap]);\n\nexport type OperationI<V extends { [key: string]: FieldSpec }> = {\n  [key in keyof V]: SnapshotIn<ReturnType<V[key][\"mobxProp\"]>>;\n} & {\n  NAME: string;\n  spec: V;\n  outputShape: Shape;\n  inputs: IObservableArray<OperationModel>;\n  nInputs: number;\n  validInput(op: OperationModel): boolean;\n  errors: ObservableMap<keyof V, string>;\n};\n\nconst mobxDecorators = <V extends { [key: string]: FieldSpec }>(spec: V) => {\n  return {\n    ...Object.keys(spec).reduce((p, c) => {\n      p[c as keyof V] = observable;\n      return p;\n    }, {} as { [key in keyof V]: PropertyDecorator }),\n    inputs: observable,\n    errors: observable,\n    outputShape: computed,\n  };\n};\n\nconst ConvolutionOpData = {\n  dimensions: new ChoiceFieldSpec({\n    choices: dimensionMap,\n    default: \"1D\",\n  }),\n  filters: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n  kernelSize: new PatternFieldSpec({\n    default: [3],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: parseArrayFromString,\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  padding: new ChoiceFieldSpec({\n    choices: listToMap([\"VALID\", \"SAME\", \"CAUSAL\"]),\n    default: \"SAME\",\n  }),\n  // filterType: new ChoiceFieldSpec({\n  //   choices: { STRIDED: \"STRIDED\", DILATED: \"DILATED\" },\n  //   default: \"STRIDED\",\n  // }),\n  stride: new PatternFieldSpec({\n    default: [2],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: parseArrayFromString,\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  dilationRate: new PatternFieldSpec({\n    default: [1],\n    pattern: extractShapePattern,\n    deps: [\"dimensions\"],\n    transform: parseArrayFromString,\n    transformInto: types.union(types.number, types.array(types.number)),\n  }),\n  trainable: new BoolFieldSpec({ default: true }),\n};\n\nconst replicateIfOne = (initial: number[], len: number) => {\n  let v;\n  if (initial.length === 1) {\n    v = Array(len).fill(initial[0]) as number[];\n  } else {\n    v = initial;\n  }\n  return v;\n};\n\nexport class ConvolutionOp implements OperationI<typeof ConvolutionOpData> {\n  NAME: string = \"Convolution\";\n  spec = ConvolutionOpData;\n\n  constructor(\n    d: {\n      dimensions?: keyof typeof dimensionMap;\n      filters?: number;\n      kernelSize?: number[];\n      padding?: \"VALID\" | \"SAME\" | \"CAUSAL\";\n      stride?: number[];\n      dilationRate?: number[];\n      trainable?: boolean;\n      inputs?: OperationModel[];\n    } = {}\n  ) {\n    this.dimensions = d.dimensions ?? ConvolutionOpData.dimensions.default;\n    this.filters = d.filters ?? ConvolutionOpData.filters.default;\n    this.kernelSize = d.kernelSize ?? ConvolutionOpData.kernelSize.default;\n    this.padding = d.padding ?? ConvolutionOpData.padding.default;\n    this.stride = d.stride ?? ConvolutionOpData.stride.default;\n    this.dilationRate =\n      d.dilationRate ?? ConvolutionOpData.dilationRate.default;\n    this.trainable = d.trainable ?? ConvolutionOpData.trainable.default;\n    this.inputs = d.inputs ? observable.array(d.inputs) : observable.array([]);\n  }\n\n  nInputs: number = 1;\n  validInput = (op: OperationModel): boolean => {\n    return op.data.outputShape.length === dimensionMap[this.dimensions] + 2;\n  };\n\n  dimensions: keyof typeof dimensionMap;\n  filters: number = ConvolutionOpData.filters.default;\n  kernelSize: number[] = ConvolutionOpData.kernelSize.default;\n  padding: \"VALID\" | \"SAME\" | \"CAUSAL\" = ConvolutionOpData.padding.default;\n  // filterType: \"STRIDED\" | \"DILATED\" = ConvolutionOpData.filterType.default;\n  stride: number[] = ConvolutionOpData.stride.default;\n  dilationRate: number[] = ConvolutionOpData.dilationRate.default;\n  trainable: boolean = ConvolutionOpData.trainable.default;\n\n  inputs: IObservableArray<OperationModel>;\n  errors = observable.map<keyof typeof ConvolutionOpData, string>();\n\n  get outputShape(): Shape {\n    if (this.inputs.length === 0 || this.errors.size > 0) return [];\n    const input = this.inputs[0].data.outputShape;\n    if (input.length === 0) return [];\n\n    const stride = replicateIfOne(this.stride, dimensionMap[this.dimensions]);\n\n    const result: Shape = [input[0]];\n    switch (this.padding) {\n      case \"CAUSAL\":\n      case \"SAME\":\n        for (let i = 0; i < stride.length; i++) {\n          const v = input[i + 1];\n          result.push(v !== undefined ? Math.ceil(v / stride[i]) : undefined);\n        }\n        break;\n      case \"VALID\": {\n        const kernelSize = replicateIfOne(\n          this.kernelSize,\n          dimensionMap[this.dimensions]\n        );\n        for (let i = 0; i < stride.length; i++) {\n          const v = input[i + 1];\n          if (v === undefined) {\n            result.push(undefined);\n            continue;\n          }\n          result.push(Math.ceil((v - kernelSize[i] + 1) / stride[i]));\n        }\n        break;\n      }\n    }\n    return result;\n  }\n}\n\ndecorate(ConvolutionOp, mobxDecorators(ConvolutionOpData));\n\nconst DenseOpData = {\n  units: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n  useBias: new BoolFieldSpec({ default: true }),\n};\n\nexport class DenseOp implements OperationI<typeof DenseOpData> {\n  spec = DenseOpData;\n  NAME = \"Dense\";\n\n  constructor(\n    d: {\n      units?: number;\n      useBias?: boolean;\n      inputs?: OperationModel[];\n    } = {}\n  ) {\n    this.units = d.units ?? DenseOpData.units.default;\n    this.useBias = d.useBias ?? DenseOpData.useBias.default;\n    this.inputs = d.inputs ? observable.array(d.inputs) : observable.array([]);\n  }\n  units: number;\n  useBias: boolean;\n\n  nInputs = 1;\n  validInput = (op: OperationModel): boolean => {\n    return op.data.outputShape.length === 2;\n  };\n\n  get outputShape(): Shape {\n    if (this.inputs.length === 0 || this.errors.size > 0) return [];\n    const input = this.inputs[0].data.outputShape;\n    if (input.length === 0) return [];\n    \n    return [input[0], this.units];\n  }\n\n  inputs: IObservableArray<OperationModel>;\n  errors: ObservableMap<keyof typeof DenseOpData, string> = observable.map();\n}\n\ndecorate(DenseOp, mobxDecorators(DenseOpData));\n\nenum DType {\n  float32 = \"float32\",\n  int32 = \"int32\",\n  bool = \"bool\",\n  complex64 = \"complex64\",\n  string = \"string\",\n}\n\nconst InputOpData = {\n  shape: new PatternFieldSpec({\n    default: [undefined, 10],\n    pattern: /(\\d+|\\?)|\\[(\\d+|\\?)(,\\d+)*(,)?\\]/,\n    transform: parseArrayFromStringWithUndefined,\n    transformFrom: (v) => JSON.stringify(v).replace(\"null\", \"?\"),\n    transformInto: types.union(\n      types.maybe(types.number),\n      types.array(types.maybe(types.number))\n    ),\n  }),\n  dtype: new ChoiceFieldSpec({\n    default: \"float32\",\n    choices: listToMap(Object.values(DType)),\n  }),\n};\n\nexport class InputOp implements OperationI<typeof InputOpData> {\n  NAME: string = \"Input\";\n  spec = InputOpData;\n\n  constructor(\n    d: {\n      shape?: (number | undefined)[];\n      dtype?: keyof typeof DType;\n      inputs?: OperationModel[];\n    } = {}\n  ) {\n    this.shape = d.shape ?? InputOpData.shape.default;\n    this.dtype = d.dtype ?? InputOpData.dtype.default;\n    this.inputs = d.inputs ? observable.array(d.inputs) : observable.array([]);\n  }\n  shape: Shape;\n  dtype: keyof typeof DType;\n\n  nInputs: number = 0;\n  validInput = (_: OperationModel): boolean => {\n    return false;\n  };\n\n  get outputShape(): Shape {\n    return this.shape;\n  }\n\n  inputs: IObservableArray<OperationModel>;\n  errors: ObservableMap<keyof typeof InputOpData, string> = observable.map();\n}\n\ndecorate(InputOp, mobxDecorators(InputOpData));\n\n// export const _DenseOp = createOp(\n//   \"Dense\",\n//   {\n//     units: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n//     useBias: new BoolFieldSpec({ default: true }),\n//   },\n//   (m) => {\n//     return [];\n//   }\n// );\n\n// export const _ConvolutionOp = createOp(\n//   \"Convolution\",\n//   {\n//     dimensions: new ChoiceFieldSpec({\n//       choices: dimensionMap,\n//       default: \"1D\",\n//     }),\n//     filters: new NumFieldSpec({ default: 32, min: 1, isInt: true }),\n//     kernelSize: (() =>\n//       new PatternFieldSpec({\n//         default: [3],\n//         pattern: extractShapePattern,\n//         deps: [\"dimensions\"],\n//         transform: (value: string) => JSON.parse(value),\n//         transformInto: types.union(types.number, types.array(types.number)),\n//       }))(),\n//     padding: new ChoiceFieldSpec({\n//       choices: listToMap([\"VALID\", \"SAME\", \"CAUSAL\"]),\n//       default: \"SAME\",\n//     }),\n//     filterType: new ChoiceFieldSpec({\n//       choices: { STRIDED: \"STRIDED\", DILATED: \"DILATED\" },\n//       default: \"STRIDED\",\n//     }),\n//     filter: new PatternFieldSpec({\n//       default: [1],\n//       pattern: extractShapePattern,\n//       deps: [\"dimensions\"],\n//       transform: (value: string) => JSON.parse(value),\n//       transformInto: types.union(types.number, types.array(types.number)),\n//     }),\n//     trainable: new BoolFieldSpec({ default: true }),\n//   },\n//   (m, l) => {\n//     l[0].from.data.outputShape();\n//     return [];\n//   }\n// );\n\n// export const InputOp = createOp(\n//   \"Input\",\n//   {\n//     shape: new PatternFieldSpec({\n//       default: [undefined, 10],\n//       pattern: /(\\d+|\\?)|\\[(\\d+|\\?)(,\\d+)+ (,)?\\]/,\n//       transform: (value: string) =>\n//         JSON.parse(value.replace(\"?\", \"undefined\").replace(\",]\", \"]\")),\n//       transformInto: types.union(\n//         types.maybe(types.number),\n//         types.array(types.maybe(types.number))\n//       ),\n//     }),\n//     dtype: new ChoiceFieldSpec({\n//       default: \"float32\",\n//       choices: listToMap(Object.values(DType)),\n//     }),\n//   },\n//   (m, b) => {\n//     return [];\n//   }\n// );\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport styled from \"styled-components\";\nimport { rootStore } from \"../App\";\nimport { ConvolutionOp, DenseOp, InputOp } from \"../operation/layers\";\nimport { OperationData } from \"../operation/operation-model\";\nimport { resizableEnable } from \"../utils\";\n\nconst MainList = styled.ul`\n  overflow-y: scroll;\n  height: 100%;\n  margin: 0;\n  padding: 0px 10px 25px;\n\n  .group {\n    padding-left: 10px;\n    padding-top: 3px;\n    padding-bottom: 3px;\n    border-top: 2px solid #eee;\n    margin-top: 6px;\n    .MuiListItemText-primary {\n      font-weight: bold;\n    }\n  }\n  .nested {\n    padding-left: 25px;\n    padding-top: 0px;\n    padding-bottom: 0px;\n  }\n`;\n\ntype Props = {};\n\nconst layerToClass: { [key: string]: () => OperationData } = {\n  Input: () => new InputOp(),\n  Convolutional: () => new ConvolutionOp(),\n  Dense: () => new DenseOp(),\n};\nconst listItems = {\n  Model: [\"Input\", \"Loss\", \"Metric\", \"Optimizer\", \"Callback\"],\n  Layers: [\n    \"Convolutional\",\n    \"Dense\",\n    \"Recurrent\",\n    \"Transformer\",\n    \"Dropout\",\n    \"Embedding\",\n    \"Normalization\",\n  ],\n  Activations: [\"Softmax\", \"Sigmoid\", \"Relu\"],\n  \"Slice / Shape\": [\n    \"Concat\",\n    \"Gather\",\n    \"Stack\",\n    \"Tile\",\n    \"Slice\",\n    \"Split\",\n    \"Reshape\",\n    \"Traspose\",\n  ],\n};\n\nexport const MainMenu: React.FC<Props> = observer(() => {\n  return (\n    <Rnd\n      disableDragging={true}\n      maxWidth={300}\n      minWidth={200}\n      style={{\n        position: \"relative\",\n        maxHeight: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n      enableResizing={resizableEnable({\n        right: true,\n      })}\n    >\n      <input type=\"text\" />\n      <MainList>\n        <List component=\"nav\">\n          {Object.entries(listItems).map(([name, list]) => (\n            <Item key={name} name={name} list={list} />\n          ))}\n        </List>\n      </MainList>\n    </Rnd>\n  );\n});\n\ntype ItemProps = { name: string; list: string[] };\n\nexport const Item: React.FC<ItemProps> = observer(({ name, list }) => {\n  const [open, setOpen] = React.useState(true);\n  return (\n    <>\n      <ListItem button onClick={() => setOpen(!open)} className=\"group\">\n        <ListItemText primary={name} />\n        <FontAwesomeIcon icon={open ? \"chevron-up\" : \"chevron-down\"} />\n      </ListItem>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <List component=\"div\" disablePadding>\n          {list.map((t) => (\n            <ListItem\n              button\n              key={t}\n              className=\"nested\"\n              onClick={() => {\n                if (t in layerToClass) {\n                  const data = layerToClass[t]();\n                  rootStore.addOperation(data);\n                }\n              }}\n            >\n              <ListItemText primary={t} />\n            </ListItem>\n          ))}\n        </List>\n      </Collapse>\n    </>\n  );\n});\n\n/* <li>\n          <div>Aritmetic Operations</div>\n          <ul>\n            <li>Add</li>\n            <li>Sub</li>\n            <li>Mul</li>\n            <li>Div</li>\n            <li>Max</li>\n            <li>Min</li>\n            <li>Pow</li>\n            <li>Min</li>\n            <li>Exp</li>\n          </ul>\n        </li>\n\n        <li>\n          <div>Logic Operations</div>\n          <ul>\n            <li>Equal</li>\n            <li>Greater</li>\n            <li>Greater Equal</li>\n            <li>Less</li>\n            <li>Less Equal</li>\n            <li>And</li>\n            <li>Or</li>\n            <li>Not</li>\n            <li>Xor</li>\n            <li>Not Equal</li>\n            <li>Where</li>\n          </ul>\n        </li> */\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { rootStore } from \"../App\";\nimport { OperationModel } from \"../operation/operation-model\";\n\ntype Props<M extends OperationModel> = {\n  model: M;\n};\n\nexport const PropertiesTable = observer(\n  <M extends OperationModel>({ model }: Props<M>) => {\n    const self = model.data;\n    const fullOfInputs = self.inputs.length >= self.nInputs;\n    return (\n      <form>\n        <PropertiesTableStyled>\n          <thead>\n            <tr>\n              <td>Property</td>\n              <td>Value</td>\n            </tr>\n          </thead>\n          <tbody>\n            {self.nInputs !== 0 && (\n              <tr>\n                <td>Inputs</td>\n                <td>\n                  {self.inputs.map((v) => (\n                    <div key={v.key}>{v.name}</div>\n                  ))}\n                  {!fullOfInputs && (\n                    <div onClick={() => rootStore.selectingInput(model)}>\n                      Add Input\n                    </div>\n                  )}\n                </td>\n              </tr>\n            )}\n            {Object.entries(self.spec).map(([k, v]) => (\n              <tr key={k}>\n                <td>{k}</td>\n                <td>\n                  <v.plotField name={k as keyof M} model={self} />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </PropertiesTableStyled>\n      </form>\n    );\n  }\n);\n\nconst PropertiesTableStyled = styled.table`\n  thead {\n    font-size: 1.1em;\n    font-weight: bolder;\n  }\n  tr td {\n    padding: 0;\n  }\n  tr td:first-child {\n    padding-right: 15px;\n    height: 32px;\n  }\n  tr td:last-child {\n    margin: auto auto;\n    padding-left: 10px;\n    text-align: center;\n    align-self: center;\n  }\n`;\n","import { observer } from \"mobx-react-lite\";\nimport { Resizable } from \"re-resizable\";\nimport React from \"react\";\nimport { rootStore } from \"../App\";\nimport { resizableEnable } from \"../utils\";\nimport { PropertiesTable } from \"./properties-table\";\n\ntype Props = {};\n\nexport const PropertiesView: React.FC<Props> = observer(() => {\n  let inner;\n  if (rootStore.selection != null) {\n    const operation = rootStore.selection;\n    inner = (\n      <div\n        style={{ overflowY: \"auto\", maxHeight: \"100%\" }}\n        key={rootStore.selection.key}\n      >\n        <input\n          type=\"text\"\n          value={operation.name}\n          onInput={(e) => operation.setName(e.currentTarget.value)}\n          onChange={() => {}}\n        ></input>\n        <PropertiesTable model={rootStore.selection} />\n      </div>\n    );\n  } else {\n    inner = (\n      <div className=\"row\">\n        <div className=\"center\">Not Selected</div>\n      </div>\n    );\n  }\n\n  return (\n    <Resizable\n      minHeight={200}\n      style={{\n        position: \"relative\",\n        background: \"white\",\n        boxShadow: \"0 1px 4px 1px #eee\",\n        padding: \"15px\",\n        borderRadius: \"6px 6px 0 0\",\n        border: \"1px solid #eee\",\n        margin: \"0 10px\",\n      }}\n      enable={resizableEnable({ top: true })}\n    >\n      {inner}\n    </Resizable>\n  );\n});\n","import { observable } from \"mobx\";\nimport React from \"react\";\nimport { MainCanvas } from \"./canvas/canvas\";\nimport { RootStoreModel } from \"./canvas/store\";\nimport { MainMenu } from \"./graph-menu/main-menu\";\nimport { ConvolutionOp, DenseOp, InputOp } from \"./operation/layers\";\nimport { OperationModel } from \"./operation/operation-model\";\nimport { PropertiesView } from \"./properties/properties-view\";\n\n// Regularizer, Constraint, Initializer,\n// dilationRate (number|[number]|[number, number]|[number, number, number])\n// The dilation rate to use for the dilated convolution in each dimension.\n// Should be an integer or array of two or three integers.\n\n// strides (number|number[]) The strides of the convolution in each dimension.\n// If strides is a number, strides in both dimensions are equal.\n// Specifying any stride value != 1 is incompatible with specifying any dilationRate value != 1.\n\nconst input1 = new OperationModel({\n  key: \"input1\",\n  name: \"Input 1\",\n  x: 72,\n  y: 60,\n  data: new InputOp(),\n});\n\nconst dense1 = new OperationModel({\n  key: \"dense1\",\n  name: \"Dense 1\",\n  x: 261,\n  y: 170,\n  data: new DenseOp({ inputs: [input1] }),\n});\nconst conv1 = new OperationModel({\n  key: \"conv1\",\n  name: \"Conv 1\",\n  x: 441,\n  y: 316,\n  data: new ConvolutionOp({ inputs: [dense1] }),\n});\n\nconst dense2 = new OperationModel({\n  key: \"dense2\",\n  name: \"Dense 2\",\n  x: 211,\n  y: 410,\n  data: new DenseOp({ inputs: [conv1, dense1] }),\n});\n\nexport const rootStore = new RootStoreModel({\n  operations: observable.map({\n    input1,\n    dense1,\n    conv1,\n    dense2,\n  }),\n  arrows: observable.array([]),\n});\n\nexport function App() {\n  return (\n    <div\n      className=\"row\"\n      style={{ background: \"rgba(250,250,250,0.7)\", height: \"100%\" }}\n    >\n      <MainMenu />\n      <div\n        className=\"col\"\n        style={{ width: \"100%\", background: \"rgba(250,250,250,0.7)\" }}\n      >\n        <MainCanvas />\n        <PropertiesView />\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faChevronDown, faChevronUp } from \"@fortawesome/free-solid-svg-icons\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(faChevronDown, faChevronUp);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}